{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "BaaS - Profile",
    "description": "<h1>Baas Profile</h1>\n\nAPI responsible for registering a person\n\nPersons Status\n\n<table>\n  <tr>\n    <td>Status</td>\n    <td>Description</td>\n    <td>Final Status</td>\n    <td>Notification Event Type</td>\n  </tr>\n  <tr>\n    <td>IN_PROGRESS</td>\n    <td>in progress to register person</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>INACTIVE</td>\n    <td>Inactive registration</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>ACTIVE</td>\n    <td>Active register</td>\n    <td>yes</td>\n    <td>profile-person_done</td>\n  </tr>\n  <tr>\n    <td>ERROR</td>\n    <td>Error registering person</td>\n    <td>yes</td>\n    <td>profile-person_error</td>\n  </tr>\n  <tr>\n    <td>EXPIRED</td>\n    <td>Register expired</td>\n    <td>yes</td>\n    <td>profile-person_expired</td>\n  </tr>\n</table>\n\nNotification for expiration date\n\n<table>\n  <tr>\n    <td>Description</td>\n    <td>Notification Event Type</td>\n  </tr>\n  <tr>\n    <td>Person profile expires in 45 days</td>\n    <td>profile-person_45d_to_expire</td>\n  </tr>\n  <tr>\n    <td>Person profile expires in 30 days</td>\n    <td>profile-person_30d_to_expire</td>\n  </tr>\n  <tr>\n    <td>Person profile expires in 15 days</td>\n    <td>profile-person_15d_to_expire</td>\n  </tr>\n  <tr>\n    <td>Person profile expires in 1 day</td>\n    <td>profile-person_01d_to_expire</td>\n  </tr>\n</table>\n\n<h2> Status Change Notification </h2>\n\nAs described in the status table, **ACTIVE** and **ERROR** will trigger notifications.\n\nIn addition, a notification with an event type of **profile-person_updated** will be sent in case of a profile update.\n\nIn order to be notified, it's necessary to have the notification URL (provided by the client) configured in the service.\nThe notification is a POST request and it's described below:\n\nNotification Request Scheme\n\nHeaders:\n```json\n  {\n    X-R4-Application: GUID // Application Unique Identifier\n    X-R4-Delivery: GUID // Attempt Unique Identifier\n    X-R4-Event: {event_type} // Event type of the notification (see Person Registration Status table)\n    User-Agent: R4-Hookshot\n  }\n```\n\nBody\n  ```json\n  {\n    \"object_kind\": \"{event_type}\", // Event type of the notification (see Person Registration Status table)\n    \"object_id\": \"GUID\", // Person Unique Identifier\n    \"application_id\": \"GUID\", // Application Unique Identifier\n  }\n  ```\n\n## Account Notification\n\nWhen route **POST /persons** has been triggered with should_create_account will fire the notifications bellow:\n\n  | Event Type            | Description                    |\n  |---------------------- | -------------------------------|\n  | `account_created`     | Account created with success   |\n  | `account_error`       | Error to create account        |\n\nNotification Request Scheme:\n\nHeaders:\n```json\n  {\n    X-R4-Application: GUID // Application Unique Identifier\n    X-R4-Delivery: GUID // Attempt Unique Identifier\n    X-R4-Event: {event_type} // Event type of the notification (see Person Registration Status table)\n    User-Agent: R4-Hookshot\n  }\n```\n\nBody\n  ```json\n  {\n    \"object_kind\": \"{event_type}\", // Event type of the notification (see Account Notification table)\n    \"object_id\": \"GUID\", // Account Unique Identifier\n    \"application_id\": \"GUID\", // Application Unique Identifier\n    \"document_number\": \"number\", // Person document number\n  }\n  ```\n"
  },
  "servers": [
    {
      "description": "Development",
      "url": "https://api-dev.bancorandon.com/baas/profile"
    },
    {
      "description": "Production",
      "url": "https://api.bancorandon.com/baas/profile"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Profile",
      "description": "Profile"
    }
  ],
  "paths": {
    "/persons/{id}": {
      "patch": {
        "tags": [
          "Person"
        ],
        "summary": "Update person by id",
        "operationId": "PatchPersonsId",
        "description": "Update a person from id.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Update Person.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "person": {
                    "type": "object",
                    "description": "Person holder details.\n",
                    "properties": {
                      "marital_status": {
                        "type": "string",
                        "enum": [
                          "MARRIED",
                          "CONCUBINAGE",
                          "PARTIAL_COMMUNITY_PROPERTY_REGIME",
                          "FULL_COMMUNITY_PROPERTY_REGIME",
                          "DESQUITADO",
                          "DIVORCED",
                          "LEGAL_SEPARATION",
                          "SINGLE",
                          "PARTIAL_SEPARATION_OF_PROPERTY_REGIME",
                          "FULL_SEPARATION_OF_PROPERTY_REGIME",
                          "WIDOWED"
                        ]
                      },
                      "nationality": {
                        "type": "string",
                        "description": "The nationality of the person.",
                        "example": "BRASILEIRA",
                        "maxLength": 50,
                        "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
                      },
                      "politically_exposed": {
                        "type": "boolean",
                        "description": "If the person is politically exposed."
                      }
                    }
                  },
                  "address": {
                    "type": "object",
                    "description": "Address from holder details.\n",
                    "properties": {
                      "uf": {
                        "type": "string",
                        "description": "The state of the person.",
                        "example": "SP",
                        "maxLength": 2
                      },
                      "city": {
                        "type": "string",
                        "description": "The city of the person.",
                        "example": "SAO PAULO",
                        "maxLength": 100,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "district": {
                        "type": "string",
                        "description": "The district of the person.",
                        "example": "MORUMBI",
                        "maxLength": 100,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "zip_code": {
                        "type": "string",
                        "description": "The CEP of the person.",
                        "example": "05653160",
                        "minLength": 8,
                        "maxLength": 8
                      },
                      "street_name": {
                        "type": "string",
                        "description": "The district of the person.",
                        "example": "AV PADRE LEBRET",
                        "maxLength": 255,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "street_number": {
                        "type": "string",
                        "description": "The street number of the person.",
                        "example": "123",
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "complement_description": {
                        "type": "string",
                        "description": "The complement description of the person.",
                        "example": "AP 321",
                        "maxLength": 10,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "ddd_number": {
                        "type": "string",
                        "description": "The DDD from phone of the person.",
                        "example": "21",
                        "maxLength": 4
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "The number from phone of the person.",
                        "example": "998877665",
                        "maxLength": 10
                      },
                      "cellphone_ddd_number": {
                        "type": "string",
                        "description": "The DDD from cellphone of the person.",
                        "example": "21",
                        "maxLength": 4
                      },
                      "cellphone_number": {
                        "type": "string",
                        "description": "The number from cellphone of the person.",
                        "example": "998877665",
                        "maxLength": 10
                      },
                      "email_address": {
                        "type": "string",
                        "description": "The email from person.",
                        "example": "test@email.com",
                        "maxLength": 100
                      },
                      "public_place": {
                        "type": "string",
                        "description": "Optional additional address information",
                        "enum": [
                          "AVENIDA",
                          "CHACARA",
                          "CONJUNTO",
                          "COLONIA",
                          "COMUNIDADE",
                          "CONJUNTO_HABITACIONAL",
                          "DISTRITO",
                          "ESTRADA",
                          "ESTANCIA",
                          "FAVELA",
                          "FAZENDA",
                          "LOTEAMENTO",
                          "RUA",
                          "RESIDENCIAL",
                          "RODOVIA",
                          "SITIO",
                          "TERMINAL",
                          "TRECHO",
                          "TREVO",
                          "TRAVESSA",
                          "UNIDADE",
                          "VIA",
                          "VILA"
                        ],
                        "example": "AVENIDA"
                      }
                    }
                  },
                  "profession": {
                    "type": "object",
                    "description": "Profession from holder details.\n",
                    "properties": {
                      "cbo_code": {
                        "type": "string",
                        "description": "Code identifying of the job.",
                        "example": "084",
                        "maxLength": 50
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the job.",
                        "maxLength": 100
                      },
                      "remuneration": {
                        "type": "number",
                        "format": "double",
                        "description": "Remuneration of the job.",
                        "example": 1000
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name from company of the job.",
                        "example": "R4",
                        "maxLength": 150
                      },
                      "company_document": {
                        "type": "number",
                        "description": "Document from company of the job, a valid CNPJ.",
                        "example": 123456789
                      },
                      "occupation_type": {
                        "type": "string",
                        "description": "Type occupation from company of the job.",
                        "enum": [
                          "RETIRED",
                          "EMPLOYEE",
                          "SELF_EMPLOYED",
                          "CO_OWNER",
                          "FREELANCER",
                          "OTHERS"
                        ],
                        "example": "FREELANCER"
                      },
                      "admission_date": {
                        "type": "string",
                        "description": "Admission date occupation of the job.",
                        "format": "date",
                        "example": "2000-01-01"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            },
            "description": "Unique identifier of the person.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Update person successfully."
          },
          "400": {
            "description": "Error with types [BadRequest].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Authentication Error].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Authentication Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "AUTHENTICATION_FAILED",
                              "enum": [
                                "AUTHENTICATION_FAILED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Authentication failed."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Error with types [Forbidden].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Forbidden",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "FORBIDDEN",
                              "enum": [
                                "FORBIDDEN"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Forbidden"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "403"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [Not Found].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "408": {
            "description": "Error with types [Timeout Exceeded].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Timeout Exceeded",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "TIMEOUT_EXCEEDED",
                              "enum": [
                                "TIMEOUT_EXCEEDED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Timeout exceeded"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "408"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is not currently available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unavailable Service",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAVAILABLE_SERVICE",
                              "enum": [
                                "UNAVAILABLE_SERVICE"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unavailable service."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "503"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Get person by id",
        "operationId": "GetPersonsId",
        "description": "Get a person from id.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            },
            "description": "Unique identifier of the account.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get person successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "person": {
                          "type": "object",
                          "description": "Account holder details.\n",
                          "properties": {
                            "full_name": {
                              "type": "string",
                              "description": "Name from person.",
                              "example": "Jonh"
                            },
                            "secondary_document_number": {
                              "type": "string",
                              "description": "The value of the secondary document.",
                              "example": "5256856547"
                            },
                            "secondary_document_type": {
                              "type": "string",
                              "description": "The Type of the secondary document.",
                              "enum": [
                                "CNH",
                                "RG",
                                "RNE"
                              ]
                            },
                            "document_number": {
                              "type": "number",
                              "description": "The value of document.",
                              "example": 81893643085
                            },
                            "uf": {
                              "type": "string",
                              "description": "The state of the document.",
                              "example": "SP"
                            },
                            "city": {
                              "type": "string",
                              "description": "The city of the document.",
                              "example": "Sao Paulo"
                            },
                            "marital_status": {
                              "type": "string",
                              "enum": [
                                "MARRIED",
                                "CONCUBINAGE",
                                "PARTIAL_COMMUNITY_PROPERTY_REGIME",
                                "FULL_COMMUNITY_PROPERTY_REGIME",
                                "DESQUITADO",
                                "DIVORCED",
                                "LEGAL_SEPARATION",
                                "SINGLE",
                                "PARTIAL_SEPARATION_OF_PROPERTY_REGIME",
                                "FULL_SEPARATION_OF_PROPERTY_REGIME",
                                "WIDOWED"
                              ]
                            },
                            "nationality": {
                              "type": "string",
                              "description": "The nationality of the person.",
                              "example": "BRASILEIRA"
                            },
                            "birth_date": {
                              "type": "string",
                              "description": "The birth date of the person.",
                              "format": "date",
                              "example": "2000-01-01"
                            },
                            "politically_exposed": {
                              "type": "boolean",
                              "description": "If the person is politically exposed."
                            }
                          }
                        },
                        "parent": {
                          "type": "object",
                          "description": "Parent account holder details.\n",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "Marie"
                            },
                            "document_number": {
                              "type": "number",
                              "description": "The value of Document.",
                              "example": 81893643085
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "SPOUSE",
                                "GROUP",
                                "MOTHER",
                                "FATHER",
                                "PARTNERSHIP",
                                "PARTNERSHIP_BACEN"
                              ]
                            },
                            "politically_exposed": {
                              "type": "boolean",
                              "description": "If the parent is politically exposed."
                            }
                          }
                        },
                        "address": {
                          "type": "object",
                          "description": "Address from holder details.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "RESIDENTIAL",
                                "MAILING"
                              ]
                            },
                            "uf": {
                              "type": "string",
                              "description": "The state of the person.",
                              "example": "SP"
                            },
                            "city": {
                              "type": "string",
                              "description": "The city of the person.",
                              "example": "Sao Paulo"
                            },
                            "district": {
                              "type": "string",
                              "description": "The district of the person.",
                              "example": "Morumbi"
                            },
                            "zip_code": {
                              "type": "string",
                              "description": "The CEP of the person.",
                              "example": "05653-160"
                            },
                            "street_name": {
                              "type": "string",
                              "description": "The district of the person.",
                              "example": "Av. Padre Lebret"
                            },
                            "street_number": {
                              "type": "string",
                              "description": "The street number of the person.",
                              "example": "123"
                            },
                            "complement_description": {
                              "type": "string",
                              "description": "The complement description of the person.",
                              "example": "AP 321"
                            },
                            "ddd_number": {
                              "type": "string",
                              "description": "The DDD from phone of the person.",
                              "example": "21"
                            },
                            "phone_number": {
                              "type": "string",
                              "description": "The number from phone of the person.",
                              "example": "998877665"
                            },
                            "complete_phone_number": {
                              "type": "string",
                              "description": "The DDD + number from phone of the person.",
                              "example": "21998877665"
                            },
                            "cellphone_ddd_number": {
                              "type": "string",
                              "description": "The DDD from cellphone of the person.",
                              "example": "21"
                            },
                            "cellphone_number": {
                              "type": "string",
                              "description": "The number from cellphone of the person.",
                              "example": "998877665"
                            },
                            "complete_cellphone_number": {
                              "type": "string",
                              "description": "The DDD + number from cellphone of the person.",
                              "example": "21998877665"
                            },
                            "email_address": {
                              "type": "string",
                              "description": "The email from person.",
                              "example": "test@email.com"
                            },
                            "public_place": {
                              "type": "string",
                              "description": "Optional additional address information",
                              "example": "R"
                            }
                          }
                        },
                        "profession": {
                          "type": "object",
                          "description": "Profession from holder details.\n",
                          "properties": {
                            "cbo_code": {
                              "type": "string",
                              "description": "Code identifying of the job.",
                              "example": "084"
                            },
                            "description": {
                              "type": "string",
                              "description": "Description of the job."
                            },
                            "remuneration": {
                              "type": "number",
                              "format": "double",
                              "description": "Remuneration of the job.",
                              "example": 1000
                            },
                            "company_name": {
                              "type": "string",
                              "description": "Name from company of the job.",
                              "example": "R4"
                            },
                            "company_document": {
                              "type": "number",
                              "description": "Document from company of the job.",
                              "example": 123456789
                            },
                            "occupation_type": {
                              "type": "string",
                              "description": "Type occupation from company of the job.",
                              "example": "TI"
                            },
                            "admission_date": {
                              "type": "string",
                              "description": "Admission date occupation of the job.",
                              "format": "date",
                              "example": "2000-01-01"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Authentication Error].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Authentication Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "AUTHENTICATION_FAILED",
                              "enum": [
                                "AUTHENTICATION_FAILED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Authentication failed."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Error with types [Forbidden].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Forbidden",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "FORBIDDEN",
                              "enum": [
                                "FORBIDDEN"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Forbidden"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "403"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [Not Found].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "408": {
            "description": "Error with types [Timeout Exceeded].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Timeout Exceeded",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "TIMEOUT_EXCEEDED",
                              "enum": [
                                "TIMEOUT_EXCEEDED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Timeout exceeded"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "408"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is not currently available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unavailable Service",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAVAILABLE_SERVICE",
                              "enum": [
                                "UNAVAILABLE_SERVICE"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unavailable service."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "503"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/persons": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Get person by document",
        "operationId": "GetPersons",
        "description": "Get a person.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "document_number",
            "schema": {
              "type": "string"
            },
            "description": "Number from document",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get person by document successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "person": {
                          "type": "object",
                          "description": "Account holder details.\n",
                          "properties": {
                            "full_name": {
                              "type": "string",
                              "description": "Name from person.",
                              "example": "Jonh"
                            },
                            "secondary_document_number": {
                              "type": "string",
                              "description": "The value of the secondary document.",
                              "example": "5256856547"
                            },
                            "secondary_document_type": {
                              "type": "string",
                              "description": "The Type of the secondary document.",
                              "enum": [
                                "CNH",
                                "RG",
                                "RNE"
                              ]
                            },
                            "document_number": {
                              "type": "number",
                              "description": "The value of document.",
                              "example": 81893643085
                            },
                            "uf": {
                              "type": "string",
                              "description": "The state of the document.",
                              "example": "SP"
                            },
                            "city": {
                              "type": "string",
                              "description": "The city of the document.",
                              "example": "Sao Paulo"
                            },
                            "marital_status": {
                              "type": "string",
                              "enum": [
                                "MARRIED",
                                "CONCUBINAGE",
                                "PARTIAL_COMMUNITY_PROPERTY_REGIME",
                                "FULL_COMMUNITY_PROPERTY_REGIME",
                                "DESQUITADO",
                                "DIVORCED",
                                "LEGAL_SEPARATION",
                                "SINGLE",
                                "PARTIAL_SEPARATION_OF_PROPERTY_REGIME",
                                "FULL_SEPARATION_OF_PROPERTY_REGIME",
                                "WIDOWED"
                              ]
                            },
                            "nationality": {
                              "type": "string",
                              "description": "The nationality of the person.",
                              "example": "BRASILEIRA"
                            },
                            "birth_date": {
                              "type": "string",
                              "description": "The birth date of the person.",
                              "format": "date",
                              "example": "2000-01-01"
                            },
                            "politically_exposed": {
                              "type": "boolean",
                              "description": "If the person is politically exposed."
                            }
                          }
                        },
                        "parent": {
                          "type": "object",
                          "description": "Parent account holder details.\n",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "Marie"
                            },
                            "document_number": {
                              "type": "number",
                              "description": "The value of Document.",
                              "example": 81893643085
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "SPOUSE",
                                "GROUP",
                                "MOTHER",
                                "FATHER",
                                "PARTNERSHIP",
                                "PARTNERSHIP_BACEN"
                              ]
                            },
                            "politically_exposed": {
                              "type": "boolean",
                              "description": "If the parent is politically exposed."
                            }
                          }
                        },
                        "address": {
                          "type": "object",
                          "description": "Address from holder details.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "RESIDENTIAL",
                                "MAILING"
                              ]
                            },
                            "uf": {
                              "type": "string",
                              "description": "The state of the person.",
                              "example": "SP"
                            },
                            "city": {
                              "type": "string",
                              "description": "The city of the person.",
                              "example": "Sao Paulo"
                            },
                            "district": {
                              "type": "string",
                              "description": "The district of the person.",
                              "example": "Morumbi"
                            },
                            "zip_code": {
                              "type": "string",
                              "description": "The CEP of the person.",
                              "example": "05653-160"
                            },
                            "street_name": {
                              "type": "string",
                              "description": "The district of the person.",
                              "example": "Av. Padre Lebret"
                            },
                            "street_number": {
                              "type": "string",
                              "description": "The street number of the person.",
                              "example": "123"
                            },
                            "complement_description": {
                              "type": "string",
                              "description": "The complement description of the person.",
                              "example": "AP 321"
                            },
                            "ddd_number": {
                              "type": "string",
                              "description": "The DDD from phone of the person.",
                              "example": "21"
                            },
                            "phone_number": {
                              "type": "string",
                              "description": "The number from phone of the person.",
                              "example": "998877665"
                            },
                            "complete_phone_number": {
                              "type": "string",
                              "description": "The DDD + number from phone of the person.",
                              "example": "21998877665"
                            },
                            "cellphone_ddd_number": {
                              "type": "string",
                              "description": "The DDD from cellphone of the person.",
                              "example": "21"
                            },
                            "cellphone_number": {
                              "type": "string",
                              "description": "The number from cellphone of the person.",
                              "example": "998877665"
                            },
                            "complete_cellphone_number": {
                              "type": "string",
                              "description": "The DDD + number from cellphone of the person.",
                              "example": "21998877665"
                            },
                            "email_address": {
                              "type": "string",
                              "description": "The email from person.",
                              "example": "test@email.com"
                            },
                            "public_place": {
                              "type": "string",
                              "description": "Optional additional address information",
                              "example": "R"
                            }
                          }
                        },
                        "profession": {
                          "type": "object",
                          "description": "Profession from holder details.\n",
                          "properties": {
                            "cbo_code": {
                              "type": "string",
                              "description": "Code identifying of the job.",
                              "example": "084"
                            },
                            "description": {
                              "type": "string",
                              "description": "Description of the job."
                            },
                            "remuneration": {
                              "type": "number",
                              "format": "double",
                              "description": "Remuneration of the job.",
                              "example": 1000
                            },
                            "company_name": {
                              "type": "string",
                              "description": "Name from company of the job.",
                              "example": "R4"
                            },
                            "company_document": {
                              "type": "number",
                              "description": "Document from company of the job.",
                              "example": 123456789
                            },
                            "occupation_type": {
                              "type": "string",
                              "description": "Type occupation from company of the job.",
                              "example": "TI"
                            },
                            "admission_date": {
                              "type": "string",
                              "description": "Admission date occupation of the job.",
                              "format": "date",
                              "example": "2000-01-01"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Authentication Error].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Authentication Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "AUTHENTICATION_FAILED",
                              "enum": [
                                "AUTHENTICATION_FAILED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Authentication failed."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Error with types [Forbidden].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Forbidden",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "FORBIDDEN",
                              "enum": [
                                "FORBIDDEN"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Forbidden"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "403"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [Not Found].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "408": {
            "description": "Error with types [Timeout Exceeded].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Timeout Exceeded",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "TIMEOUT_EXCEEDED",
                              "enum": [
                                "TIMEOUT_EXCEEDED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Timeout exceeded"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "408"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is not currently available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unavailable Service",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAVAILABLE_SERVICE",
                              "enum": [
                                "UNAVAILABLE_SERVICE"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unavailable service."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "503"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Create person",
        "operationId": "PostPersons",
        "description": "Create a person.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Create Person.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "person",
                  "parent",
                  "address",
                  "profession"
                ],
                "properties": {
                  "person": {
                    "type": "object",
                    "required": [
                      "full_name",
                      "document_number",
                      "secondary_document_number",
                      "secondary_document_type",
                      "nationality",
                      "birth_date",
                      "politically_exposed"
                    ],
                    "description": "Account holder details.\n",
                    "properties": {
                      "full_name": {
                        "type": "string",
                        "description": "Name from person.",
                        "example": "JONH",
                        "maxLength": 150,
                        "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
                      },
                      "document_number": {
                        "type": "number",
                        "description": "The value of document, a valid CPF.",
                        "example": 81893643085
                      },
                      "secondary_document_number": {
                        "type": "string",
                        "description": "The value of the secondary document.",
                        "example": "5256856547"
                      },
                      "secondary_document_type": {
                        "type": "string",
                        "description": "The Type of the secondary document.",
                        "enum": [
                          "CNH",
                          "RG"
                        ]
                      },
                      "marital_status": {
                        "type": "string",
                        "enum": [
                          "MARRIED",
                          "CONCUBINAGE",
                          "PARTIAL_COMMUNITY_PROPERTY_REGIME",
                          "FULL_COMMUNITY_PROPERTY_REGIME",
                          "DESQUITADO",
                          "DIVORCED",
                          "LEGAL_SEPARATION",
                          "SINGLE",
                          "PARTIAL_SEPARATION_OF_PROPERTY_REGIME",
                          "FULL_SEPARATION_OF_PROPERTY_REGIME",
                          "WIDOWED"
                        ]
                      },
                      "nationality": {
                        "type": "string",
                        "description": "The nationality of the person.",
                        "example": "BRASILEIRA",
                        "maxLength": 50,
                        "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
                      },
                      "birth_date": {
                        "type": "string",
                        "description": "The birth date of the person.",
                        "format": "date",
                        "example": "2000-01-01"
                      },
                      "politically_exposed": {
                        "type": "boolean",
                        "description": "If the person is politically exposed."
                      },
                      "should_create_account": {
                        "type": "boolean",
                        "default": false,
                        "description": "If this flag is on after the creation of profile will create account for the person."
                      }
                    }
                  },
                  "parent": {
                    "type": "object",
                    "required": [
                      "name",
                      "type"
                    ],
                    "description": "Parent account holder details.\n",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "MARIE",
                        "maxLength": 150,
                        "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
                      },
                      "document_number": {
                        "type": "number",
                        "description": "The value of Document, a valid CPF.",
                        "example": 81893643085
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "MOTHER"
                        ]
                      },
                      "politically_exposed": {
                        "type": "boolean",
                        "description": "If the parent is politically exposed."
                      }
                    }
                  },
                  "address": {
                    "type": "object",
                    "required": [
                      "uf",
                      "city",
                      "district",
                      "zip_code",
                      "street_name",
                      "street_number",
                      "complement_description",
                      "ddd_number",
                      "phone_number",
                      "email_address"
                    ],
                    "description": "Address from holder details.\n",
                    "properties": {
                      "uf": {
                        "type": "string",
                        "description": "The state of the person.",
                        "example": "SP",
                        "maxLength": 2
                      },
                      "city": {
                        "type": "string",
                        "description": "The city of the person.",
                        "example": "SAO PAULO",
                        "maxLength": 100,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "district": {
                        "type": "string",
                        "description": "The district of the person.",
                        "example": "MORUMBI",
                        "maxLength": 100,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "zip_code": {
                        "type": "string",
                        "description": "The CEP of the person.",
                        "example": "05653160",
                        "maxLength": 8
                      },
                      "street_name": {
                        "type": "string",
                        "description": "The district of the person.",
                        "example": "AV PADRE LEBRET",
                        "maxLength": 255,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "street_number": {
                        "type": "string",
                        "description": "The street number of the person.",
                        "example": "123",
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "complement_description": {
                        "type": "string",
                        "description": "The complement description of the person.",
                        "example": "AP 321",
                        "maxLength": 10,
                        "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
                      },
                      "ddd_number": {
                        "type": "string",
                        "description": "The DDD from phone of the person.",
                        "example": "21",
                        "maxLength": 4
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "The number from phone of the person.",
                        "example": "998877665",
                        "maxLength": 10
                      },
                      "cellphone_ddd_number": {
                        "type": "string",
                        "description": "The DDD from cellphone of the person.",
                        "example": "21",
                        "maxLength": 4
                      },
                      "cellphone_number": {
                        "type": "string",
                        "description": "The number from cellphone of the person.",
                        "example": "998877665",
                        "maxLength": 10
                      },
                      "email_address": {
                        "type": "string",
                        "description": "The email from person.",
                        "example": "test@email.com",
                        "maxLength": 100
                      },
                      "public_place": {
                        "type": "string",
                        "description": "Optional additional address information",
                        "enum": [
                          "AVENIDA",
                          "CHACARA",
                          "CONJUNTO",
                          "COLONIA",
                          "COMUNIDADE",
                          "CONJUNTO_HABITACIONAL",
                          "DISTRITO",
                          "ESTRADA",
                          "ESTANCIA",
                          "FAVELA",
                          "FAZENDA",
                          "LOTEAMENTO",
                          "RUA",
                          "RESIDENCIAL",
                          "RODOVIA",
                          "SITIO",
                          "TERMINAL",
                          "TRECHO",
                          "TREVO",
                          "TRAVESSA",
                          "UNIDADE",
                          "VIA",
                          "VILA"
                        ],
                        "example": "AVENIDA"
                      }
                    }
                  },
                  "profession": {
                    "type": "object",
                    "required": [
                      "cbo_code",
                      "description",
                      "remuneration",
                      "occupation_type"
                    ],
                    "description": "Profession from holder details.\n",
                    "properties": {
                      "cbo_code": {
                        "type": "string",
                        "description": "Code identifying of the job.",
                        "example": "084",
                        "maxLength": 50
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the job.",
                        "maxLength": 100
                      },
                      "remuneration": {
                        "type": "number",
                        "format": "double",
                        "description": "Remuneration of the job.",
                        "example": 1000
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name from company of the job.",
                        "example": "R4"
                      },
                      "company_document": {
                        "type": "number",
                        "description": "Document from company of the job.",
                        "example": 123456789,
                        "maxLength": 150
                      },
                      "occupation_type": {
                        "type": "string",
                        "description": "Type occupation from company of the job.",
                        "enum": [
                          "RETIRED",
                          "EMPLOYEE",
                          "SELF_EMPLOYED",
                          "CO_OWNER",
                          "FREELANCER",
                          "OTHERS"
                        ],
                        "example": "FREELANCER",
                        "maxLength": 100
                      },
                      "admission_date": {
                        "type": "string",
                        "description": "Admission date occupation of the job.",
                        "format": "date",
                        "example": "2000-01-01"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a person successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the person.",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Authentication Error].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Authentication Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "AUTHENTICATION_FAILED",
                              "enum": [
                                "AUTHENTICATION_FAILED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Authentication failed."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Error with types [Forbidden].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Forbidden",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "FORBIDDEN",
                              "enum": [
                                "FORBIDDEN"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Forbidden"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "403"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [Not Found].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Application product not found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "APPLICATION_PRODUCT_NOT_FOUND",
                          "enum": [
                            "APPLICATION_PRODUCT_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Application product not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "408": {
            "description": "Error with types [Timeout Exceeded].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Timeout Exceeded",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "TIMEOUT_EXCEEDED",
                              "enum": [
                                "TIMEOUT_EXCEEDED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Timeout exceeded"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "408"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Error with types [Conflict].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Conflict",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "CONFLICT",
                              "enum": [
                                "CONFLICT"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "The request could not be completed due to a conflict with the current state of the target resource"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "409"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is not currently available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unavailable Service",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAVAILABLE_SERVICE",
                              "enum": [
                                "UNAVAILABLE_SERVICE"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unavailable service."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "503"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/persons/cnae": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "List of CNAE",
        "operationId": "GetPersonsCnae",
        "description": "Returns a list of CNAE.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "description": "CNAE ID",
            "required": false
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Limit of CNAE to return for a single page",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page to be returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "CNAE successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "number",
                      "description": "Limit of records per page.",
                      "example": 100
                    },
                    "page": {
                      "type": "number",
                      "example": 2
                    },
                    "count": {
                      "type": "number",
                      "description": "Number of CNAE returned for the current page.",
                      "example": 1
                    },
                    "segments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Describes the properties of a CNAE.",
                        "properties": {
                          "cnae_code": {
                            "type": "string",
                            "description": "CNAE ID.",
                            "example": "B06"
                          },
                          "description": {
                            "type": "string",
                            "example": "EXTRACAO DE PETROLEO E GAS NATURAL"
                          },
                          "level": {
                            "type": "number",
                            "example": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Authentication Error].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Authentication Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "AUTHENTICATION_FAILED",
                              "enum": [
                                "AUTHENTICATION_FAILED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Authentication failed."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "408": {
            "description": "Error with types [Timeout Exceeded].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Timeout Exceeded",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "TIMEOUT_EXCEEDED",
                              "enum": [
                                "TIMEOUT_EXCEEDED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Timeout exceeded"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "408"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is not currently available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unavailable Service",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAVAILABLE_SERVICE",
                              "enum": [
                                "UNAVAILABLE_SERVICE"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unavailable service."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "503"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/persons/segments": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "List of segments",
        "operationId": "GetPersonsSegments",
        "description": "Returns a list of segments.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "number"
            },
            "description": "Segment ID",
            "required": false
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Limit of segments to return for a single page",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page to be returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Segment(s) successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "number",
                      "description": "Limit of records per page.",
                      "example": 100
                    },
                    "page": {
                      "type": "number",
                      "example": 2
                    },
                    "count": {
                      "type": "number",
                      "description": "Number of segments returned for the current page.",
                      "example": 1
                    },
                    "segments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Describes the properties of a segment.",
                        "properties": {
                          "segment_code": {
                            "type": "number",
                            "description": "Segment ID.",
                            "example": 2
                          },
                          "abbreviation": {
                            "type": "string",
                            "example": "DISTRI"
                          },
                          "description": {
                            "type": "string",
                            "example": "DISTRIBUIDOR"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Authentication Error].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Authentication Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "AUTHENTICATION_FAILED",
                              "enum": [
                                "AUTHENTICATION_FAILED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Authentication failed."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "408": {
            "description": "Error with types [Timeout Exceeded].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Timeout Exceeded",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "TIMEOUT_EXCEEDED",
                              "enum": [
                                "TIMEOUT_EXCEEDED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Timeout exceeded"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "408"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is not currently available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unavailable Service",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAVAILABLE_SERVICE",
                              "enum": [
                                "UNAVAILABLE_SERVICE"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unavailable service."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "503"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "List of jobs",
        "operationId": "GetJobs",
        "description": "Returns a list of jobs. If no jobs are found, you can call the API tagged **OUTROS**.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Name from jobs",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of jobs to return",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page of jobs from search.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "number",
                      "description": "Limit of records per page.",
                      "example": 100
                    },
                    "page": {
                      "type": "number",
                      "description": "Page from get job.",
                      "example": 2
                    },
                    "count": {
                      "type": "number",
                      "description": "Number of jobs returned for the current page.",
                      "example": 1
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Describes the properties of a job.",
                        "properties": {
                          "cbo_code": {
                            "type": "string",
                            "description": "Code identifying of the job.",
                            "example": "084"
                          },
                          "abbreviation": {
                            "type": "string",
                            "description": "Name abbreviation of the job.",
                            "example": "PROGR.DE COMPUTADOR"
                          },
                          "name": {
                            "type": "string",
                            "description": "Full name of the job.",
                            "example": "PROGRAMADOR DE COMPUTADOR"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Authentication Error].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Authentication Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "AUTHENTICATION_FAILED",
                              "enum": [
                                "AUTHENTICATION_FAILED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Authentication failed."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "408": {
            "description": "Error with types [Timeout Exceeded].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Timeout Exceeded",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "TIMEOUT_EXCEEDED",
                              "enum": [
                                "TIMEOUT_EXCEEDED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Timeout exceeded"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "408"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is not currently available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unavailable Service",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAVAILABLE_SERVICE",
                              "enum": [
                                "UNAVAILABLE_SERVICE"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unavailable service."
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "503"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "description": "Bearer auth (https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)."
      }
    },
    "schemas": {
      "Person": {
        "type": "object",
        "properties": {
          "person": {
            "type": "object",
            "description": "Account holder details.\n",
            "properties": {
              "full_name": {
                "type": "string",
                "description": "Name from person.",
                "example": "Jonh"
              },
              "secondary_document_number": {
                "type": "string",
                "description": "The value of the secondary document.",
                "example": "5256856547"
              },
              "secondary_document_type": {
                "type": "string",
                "description": "The Type of the secondary document.",
                "enum": [
                  "CNH",
                  "RG",
                  "RNE"
                ]
              },
              "document_number": {
                "type": "number",
                "description": "The value of document.",
                "example": 81893643085
              },
              "uf": {
                "type": "string",
                "description": "The state of the document.",
                "example": "SP"
              },
              "city": {
                "type": "string",
                "description": "The city of the document.",
                "example": "Sao Paulo"
              },
              "marital_status": {
                "type": "string",
                "enum": [
                  "MARRIED",
                  "CONCUBINAGE",
                  "PARTIAL_COMMUNITY_PROPERTY_REGIME",
                  "FULL_COMMUNITY_PROPERTY_REGIME",
                  "DESQUITADO",
                  "DIVORCED",
                  "LEGAL_SEPARATION",
                  "SINGLE",
                  "PARTIAL_SEPARATION_OF_PROPERTY_REGIME",
                  "FULL_SEPARATION_OF_PROPERTY_REGIME",
                  "WIDOWED"
                ]
              },
              "nationality": {
                "type": "string",
                "description": "The nationality of the person.",
                "example": "BRASILEIRA"
              },
              "birth_date": {
                "type": "string",
                "description": "The birth date of the person.",
                "format": "date",
                "example": "2000-01-01"
              },
              "politically_exposed": {
                "type": "boolean",
                "description": "If the person is politically exposed."
              }
            }
          },
          "parent": {
            "type": "object",
            "description": "Parent account holder details.\n",
            "properties": {
              "name": {
                "type": "string",
                "example": "Marie"
              },
              "document_number": {
                "type": "number",
                "description": "The value of Document.",
                "example": 81893643085
              },
              "type": {
                "type": "string",
                "enum": [
                  "SPOUSE",
                  "GROUP",
                  "MOTHER",
                  "FATHER",
                  "PARTNERSHIP",
                  "PARTNERSHIP_BACEN"
                ]
              },
              "politically_exposed": {
                "type": "boolean",
                "description": "If the parent is politically exposed."
              }
            }
          },
          "address": {
            "type": "object",
            "description": "Address from holder details.\n",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "RESIDENTIAL",
                  "MAILING"
                ]
              },
              "uf": {
                "type": "string",
                "description": "The state of the person.",
                "example": "SP"
              },
              "city": {
                "type": "string",
                "description": "The city of the person.",
                "example": "Sao Paulo"
              },
              "district": {
                "type": "string",
                "description": "The district of the person.",
                "example": "Morumbi"
              },
              "zip_code": {
                "type": "string",
                "description": "The CEP of the person.",
                "example": "05653-160"
              },
              "street_name": {
                "type": "string",
                "description": "The district of the person.",
                "example": "Av. Padre Lebret"
              },
              "street_number": {
                "type": "string",
                "description": "The street number of the person.",
                "example": "123"
              },
              "complement_description": {
                "type": "string",
                "description": "The complement description of the person.",
                "example": "AP 321"
              },
              "ddd_number": {
                "type": "string",
                "description": "The DDD from phone of the person.",
                "example": "21"
              },
              "phone_number": {
                "type": "string",
                "description": "The number from phone of the person.",
                "example": "998877665"
              },
              "complete_phone_number": {
                "type": "string",
                "description": "The DDD + number from phone of the person.",
                "example": "21998877665"
              },
              "cellphone_ddd_number": {
                "type": "string",
                "description": "The DDD from cellphone of the person.",
                "example": "21"
              },
              "cellphone_number": {
                "type": "string",
                "description": "The number from cellphone of the person.",
                "example": "998877665"
              },
              "complete_cellphone_number": {
                "type": "string",
                "description": "The DDD + number from cellphone of the person.",
                "example": "21998877665"
              },
              "email_address": {
                "type": "string",
                "description": "The email from person.",
                "example": "test@email.com"
              },
              "public_place": {
                "type": "string",
                "description": "Optional additional address information",
                "example": "R"
              }
            }
          },
          "profession": {
            "type": "object",
            "description": "Profession from holder details.\n",
            "properties": {
              "cbo_code": {
                "type": "string",
                "description": "Code identifying of the job.",
                "example": "084"
              },
              "description": {
                "type": "string",
                "description": "Description of the job."
              },
              "remuneration": {
                "type": "number",
                "format": "double",
                "description": "Remuneration of the job.",
                "example": 1000
              },
              "company_name": {
                "type": "string",
                "description": "Name from company of the job.",
                "example": "R4"
              },
              "company_document": {
                "type": "number",
                "description": "Document from company of the job.",
                "example": 123456789
              },
              "occupation_type": {
                "type": "string",
                "description": "Type occupation from company of the job.",
                "example": "TI"
              },
              "admission_date": {
                "type": "string",
                "description": "Admission date occupation of the job.",
                "format": "date",
                "example": "2000-01-01"
              }
            }
          }
        }
      },
      "BadRequest": {
        "title": "Bad Request",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "BAD_REQUEST",
            "enum": [
              "BAD_REQUEST"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "Invalid request params"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "400"
          }
        }
      },
      "AuthenticationError": {
        "title": "Authentication Error",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "AUTHENTICATION_FAILED",
                "enum": [
                  "AUTHENTICATION_FAILED"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "Authentication failed."
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "401"
              }
            }
          }
        }
      },
      "Forbidden": {
        "title": "Forbidden",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "FORBIDDEN",
                "enum": [
                  "FORBIDDEN"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "Forbidden"
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "403"
              }
            }
          }
        }
      },
      "NotFound": {
        "title": "Not Found",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "NOT_FOUND",
                "enum": [
                  "NOT_FOUND"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "Unable to found the requested account"
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "404"
              }
            }
          }
        }
      },
      "TimeoutExceeded": {
        "title": "Timeout Exceeded",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "TIMEOUT_EXCEEDED",
                "enum": [
                  "TIMEOUT_EXCEEDED"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "Timeout exceeded"
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "408"
              }
            }
          }
        }
      },
      "InternalServerError": {
        "title": "Internal Server Error",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "INTERNAL_SERVER_ERROR",
            "enum": [
              "INTERNAL_SERVER_ERROR"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "Unexpected error with our service"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "500"
          }
        }
      },
      "unavailable-service": {
        "title": "Unavailable Service",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "UNAVAILABLE_SERVICE",
                "enum": [
                  "UNAVAILABLE_SERVICE"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "Unavailable service."
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "503"
              }
            }
          }
        }
      },
      "UpdatePerson": {
        "type": "object",
        "properties": {
          "person": {
            "type": "object",
            "description": "Person holder details.\n",
            "properties": {
              "marital_status": {
                "type": "string",
                "enum": [
                  "MARRIED",
                  "CONCUBINAGE",
                  "PARTIAL_COMMUNITY_PROPERTY_REGIME",
                  "FULL_COMMUNITY_PROPERTY_REGIME",
                  "DESQUITADO",
                  "DIVORCED",
                  "LEGAL_SEPARATION",
                  "SINGLE",
                  "PARTIAL_SEPARATION_OF_PROPERTY_REGIME",
                  "FULL_SEPARATION_OF_PROPERTY_REGIME",
                  "WIDOWED"
                ]
              },
              "nationality": {
                "type": "string",
                "description": "The nationality of the person.",
                "example": "BRASILEIRA",
                "maxLength": 50,
                "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
              },
              "politically_exposed": {
                "type": "boolean",
                "description": "If the person is politically exposed."
              }
            }
          },
          "address": {
            "type": "object",
            "description": "Address from holder details.\n",
            "properties": {
              "uf": {
                "type": "string",
                "description": "The state of the person.",
                "example": "SP",
                "maxLength": 2
              },
              "city": {
                "type": "string",
                "description": "The city of the person.",
                "example": "SAO PAULO",
                "maxLength": 100,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "district": {
                "type": "string",
                "description": "The district of the person.",
                "example": "MORUMBI",
                "maxLength": 100,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "zip_code": {
                "type": "string",
                "description": "The CEP of the person.",
                "example": "05653160",
                "minLength": 8,
                "maxLength": 8
              },
              "street_name": {
                "type": "string",
                "description": "The district of the person.",
                "example": "AV PADRE LEBRET",
                "maxLength": 255,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "street_number": {
                "type": "string",
                "description": "The street number of the person.",
                "example": "123",
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "complement_description": {
                "type": "string",
                "description": "The complement description of the person.",
                "example": "AP 321",
                "maxLength": 10,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "ddd_number": {
                "type": "string",
                "description": "The DDD from phone of the person.",
                "example": "21",
                "maxLength": 4
              },
              "phone_number": {
                "type": "string",
                "description": "The number from phone of the person.",
                "example": "998877665",
                "maxLength": 10
              },
              "cellphone_ddd_number": {
                "type": "string",
                "description": "The DDD from cellphone of the person.",
                "example": "21",
                "maxLength": 4
              },
              "cellphone_number": {
                "type": "string",
                "description": "The number from cellphone of the person.",
                "example": "998877665",
                "maxLength": 10
              },
              "email_address": {
                "type": "string",
                "description": "The email from person.",
                "example": "test@email.com",
                "maxLength": 100
              },
              "public_place": {
                "type": "string",
                "description": "Optional additional address information",
                "enum": [
                  "AVENIDA",
                  "CHACARA",
                  "CONJUNTO",
                  "COLONIA",
                  "COMUNIDADE",
                  "CONJUNTO_HABITACIONAL",
                  "DISTRITO",
                  "ESTRADA",
                  "ESTANCIA",
                  "FAVELA",
                  "FAZENDA",
                  "LOTEAMENTO",
                  "RUA",
                  "RESIDENCIAL",
                  "RODOVIA",
                  "SITIO",
                  "TERMINAL",
                  "TRECHO",
                  "TREVO",
                  "TRAVESSA",
                  "UNIDADE",
                  "VIA",
                  "VILA"
                ],
                "example": "AVENIDA"
              }
            }
          },
          "profession": {
            "type": "object",
            "description": "Profession from holder details.\n",
            "properties": {
              "cbo_code": {
                "type": "string",
                "description": "Code identifying of the job.",
                "example": "084",
                "maxLength": 50
              },
              "description": {
                "type": "string",
                "description": "Description of the job.",
                "maxLength": 100
              },
              "remuneration": {
                "type": "number",
                "format": "double",
                "description": "Remuneration of the job.",
                "example": 1000
              },
              "company_name": {
                "type": "string",
                "description": "Name from company of the job.",
                "example": "R4",
                "maxLength": 150
              },
              "company_document": {
                "type": "number",
                "description": "Document from company of the job, a valid CNPJ.",
                "example": 123456789
              },
              "occupation_type": {
                "type": "string",
                "description": "Type occupation from company of the job.",
                "enum": [
                  "RETIRED",
                  "EMPLOYEE",
                  "SELF_EMPLOYED",
                  "CO_OWNER",
                  "FREELANCER",
                  "OTHERS"
                ],
                "example": "FREELANCER"
              },
              "admission_date": {
                "type": "string",
                "description": "Admission date occupation of the job.",
                "format": "date",
                "example": "2000-01-01"
              }
            }
          }
        }
      },
      "Person-2": {
        "type": "object",
        "required": [
          "person",
          "parent",
          "address",
          "profession"
        ],
        "properties": {
          "person": {
            "type": "object",
            "required": [
              "full_name",
              "document_number",
              "secondary_document_number",
              "secondary_document_type",
              "nationality",
              "birth_date",
              "politically_exposed"
            ],
            "description": "Account holder details.\n",
            "properties": {
              "full_name": {
                "type": "string",
                "description": "Name from person.",
                "example": "JONH",
                "maxLength": 150,
                "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
              },
              "document_number": {
                "type": "number",
                "description": "The value of document, a valid CPF.",
                "example": 81893643085
              },
              "secondary_document_number": {
                "type": "string",
                "description": "The value of the secondary document.",
                "example": "5256856547"
              },
              "secondary_document_type": {
                "type": "string",
                "description": "The Type of the secondary document.",
                "enum": [
                  "CNH",
                  "RG"
                ]
              },
              "marital_status": {
                "type": "string",
                "enum": [
                  "MARRIED",
                  "CONCUBINAGE",
                  "PARTIAL_COMMUNITY_PROPERTY_REGIME",
                  "FULL_COMMUNITY_PROPERTY_REGIME",
                  "DESQUITADO",
                  "DIVORCED",
                  "LEGAL_SEPARATION",
                  "SINGLE",
                  "PARTIAL_SEPARATION_OF_PROPERTY_REGIME",
                  "FULL_SEPARATION_OF_PROPERTY_REGIME",
                  "WIDOWED"
                ]
              },
              "nationality": {
                "type": "string",
                "description": "The nationality of the person.",
                "example": "BRASILEIRA",
                "maxLength": 50,
                "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
              },
              "birth_date": {
                "type": "string",
                "description": "The birth date of the person.",
                "format": "date",
                "example": "2000-01-01"
              },
              "politically_exposed": {
                "type": "boolean",
                "description": "If the person is politically exposed."
              },
              "should_create_account": {
                "type": "boolean",
                "default": false,
                "description": "If this flag is on after the creation of profile will create account for the person."
              }
            }
          },
          "parent": {
            "type": "object",
            "required": [
              "name",
              "type"
            ],
            "description": "Parent account holder details.\n",
            "properties": {
              "name": {
                "type": "string",
                "example": "MARIE",
                "maxLength": 150,
                "pattern": "[A-Z]{1,}(\\s{1}[A-Z]+)*$"
              },
              "document_number": {
                "type": "number",
                "description": "The value of Document, a valid CPF.",
                "example": 81893643085
              },
              "type": {
                "type": "string",
                "enum": [
                  "MOTHER"
                ]
              },
              "politically_exposed": {
                "type": "boolean",
                "description": "If the parent is politically exposed."
              }
            }
          },
          "address": {
            "type": "object",
            "required": [
              "uf",
              "city",
              "district",
              "zip_code",
              "street_name",
              "street_number",
              "complement_description",
              "ddd_number",
              "phone_number",
              "email_address"
            ],
            "description": "Address from holder details.\n",
            "properties": {
              "uf": {
                "type": "string",
                "description": "The state of the person.",
                "example": "SP",
                "maxLength": 2
              },
              "city": {
                "type": "string",
                "description": "The city of the person.",
                "example": "SAO PAULO",
                "maxLength": 100,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "district": {
                "type": "string",
                "description": "The district of the person.",
                "example": "MORUMBI",
                "maxLength": 100,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "zip_code": {
                "type": "string",
                "description": "The CEP of the person.",
                "example": "05653160",
                "maxLength": 8
              },
              "street_name": {
                "type": "string",
                "description": "The district of the person.",
                "example": "AV PADRE LEBRET",
                "maxLength": 255,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "street_number": {
                "type": "string",
                "description": "The street number of the person.",
                "example": "123",
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "complement_description": {
                "type": "string",
                "description": "The complement description of the person.",
                "example": "AP 321",
                "maxLength": 10,
                "pattern": "^[A-Z0-9]{1,}(\\s{1}[A-Z0-9]+)*$"
              },
              "ddd_number": {
                "type": "string",
                "description": "The DDD from phone of the person.",
                "example": "21",
                "maxLength": 4
              },
              "phone_number": {
                "type": "string",
                "description": "The number from phone of the person.",
                "example": "998877665",
                "maxLength": 10
              },
              "cellphone_ddd_number": {
                "type": "string",
                "description": "The DDD from cellphone of the person.",
                "example": "21",
                "maxLength": 4
              },
              "cellphone_number": {
                "type": "string",
                "description": "The number from cellphone of the person.",
                "example": "998877665",
                "maxLength": 10
              },
              "email_address": {
                "type": "string",
                "description": "The email from person.",
                "example": "test@email.com",
                "maxLength": 100
              },
              "public_place": {
                "type": "string",
                "description": "Optional additional address information",
                "enum": [
                  "AVENIDA",
                  "CHACARA",
                  "CONJUNTO",
                  "COLONIA",
                  "COMUNIDADE",
                  "CONJUNTO_HABITACIONAL",
                  "DISTRITO",
                  "ESTRADA",
                  "ESTANCIA",
                  "FAVELA",
                  "FAZENDA",
                  "LOTEAMENTO",
                  "RUA",
                  "RESIDENCIAL",
                  "RODOVIA",
                  "SITIO",
                  "TERMINAL",
                  "TRECHO",
                  "TREVO",
                  "TRAVESSA",
                  "UNIDADE",
                  "VIA",
                  "VILA"
                ],
                "example": "AVENIDA"
              }
            }
          },
          "profession": {
            "type": "object",
            "required": [
              "cbo_code",
              "description",
              "remuneration",
              "occupation_type"
            ],
            "description": "Profession from holder details.\n",
            "properties": {
              "cbo_code": {
                "type": "string",
                "description": "Code identifying of the job.",
                "example": "084",
                "maxLength": 50
              },
              "description": {
                "type": "string",
                "description": "Description of the job.",
                "maxLength": 100
              },
              "remuneration": {
                "type": "number",
                "format": "double",
                "description": "Remuneration of the job.",
                "example": 1000
              },
              "company_name": {
                "type": "string",
                "description": "Name from company of the job.",
                "example": "R4"
              },
              "company_document": {
                "type": "number",
                "description": "Document from company of the job.",
                "example": 123456789,
                "maxLength": 150
              },
              "occupation_type": {
                "type": "string",
                "description": "Type occupation from company of the job.",
                "enum": [
                  "RETIRED",
                  "EMPLOYEE",
                  "SELF_EMPLOYED",
                  "CO_OWNER",
                  "FREELANCER",
                  "OTHERS"
                ],
                "example": "FREELANCER",
                "maxLength": 100
              },
              "admission_date": {
                "type": "string",
                "description": "Admission date occupation of the job.",
                "format": "date",
                "example": "2000-01-01"
              }
            }
          }
        }
      },
      "ApplicationProductNotFoundError": {
        "title": "Application product not found",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "APPLICATION_PRODUCT_NOT_FOUND",
            "enum": [
              "APPLICATION_PRODUCT_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "Application product not found"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "404"
          }
        }
      },
      "Conflict": {
        "title": "Conflict",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "CONFLICT",
                "enum": [
                  "CONFLICT"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "The request could not be completed due to a conflict with the current state of the target resource"
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "409"
              }
            }
          }
        }
      },
      "CNAE": {
        "type": "object",
        "description": "Describes the properties of a CNAE.",
        "properties": {
          "cnae_code": {
            "type": "string",
            "description": "CNAE ID.",
            "example": "B06"
          },
          "description": {
            "type": "string",
            "example": "EXTRACAO DE PETROLEO E GAS NATURAL"
          },
          "level": {
            "type": "number",
            "example": 2
          }
        }
      },
      "Segment": {
        "type": "object",
        "description": "Describes the properties of a segment.",
        "properties": {
          "segment_code": {
            "type": "number",
            "description": "Segment ID.",
            "example": 2
          },
          "abbreviation": {
            "type": "string",
            "example": "DISTRI"
          },
          "description": {
            "type": "string",
            "example": "DISTRIBUIDOR"
          }
        }
      },
      "Jobs": {
        "type": "object",
        "description": "Describes the properties of a job.",
        "properties": {
          "cbo_code": {
            "type": "string",
            "description": "Code identifying of the job.",
            "example": "084"
          },
          "abbreviation": {
            "type": "string",
            "description": "Name abbreviation of the job.",
            "example": "PROGR.DE COMPUTADOR"
          },
          "name": {
            "type": "string",
            "description": "Full name of the job.",
            "example": "PROGRAMADOR DE COMPUTADOR"
          }
        }
      }
    }
  }
}