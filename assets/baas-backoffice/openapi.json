{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "BaaS - Backoffice",
    "description": "BaaS Backoffice\n\nApi responsible for managing backoffice operations, reports, etc.\n\n## Internal Operation Status\n\n| Status | Description | Final Status | Notification Event Type |\n| ------ | ----------- | ------------ | ----------------------  |\n| CREATED       | Operation created | | |\n| CONFIRMING    | Operation begin verified with the client if it was requested by him | | |\n| CONFIRMED     | Operation confirmed by the client | | |\n| NOT_CONFIRMED | Operation denied by the client | Yes | backoffice_internal_operation_not_confirmed |\n| PROCESSING    | Processing bank operation | | |\n| REJECTED      | Operation rejected due internal validation | Yes | backoffice_internal_operation_rejected |\n| ERROR         | Failure to process | Yes | backoffice_internal_operation_error | |\n| DONE          | Operation completed successfully | Yes | backoffice_internal_operation_done |\n\n## Internal Operation Confirmation Call\n\nTo receive the confirmation, its necessary the previous registration of the client url.\n  This object will be sent as an HTTP call with the POST method, of which the client must respond with a 202 status and within 10 seconds.\n\n**Internal Operation Confirmation Call Scheme**\n\n  Headers:\n  ```json\n  {\n    X-R4-Application: GUID // Application Unique Identifier\n    X-R4-Delivery: GUID // Attempt Unique Identifier\n    X-R4-Event: internal_operation_confirmation\n    User-Agent: R4-Hookshot\n  }\n  ```\n  Body\n  ```json\n  {\n    \"object_kind\": \"internal_operation_confirmation\",\n    \"object_id\": \"GUID\", // Internal Operation Unique Identifier\n    \"application_id\": \"GUID\", // Application Unique Identifier\n    \"account_id\": \"GUID\", // Account Unique Identifier\n    \"account_number\": 1234567,\n    \"account_digit\": 7,\n    \"agency_number\": 1,\n    \"value\": 10.12,\n    \"history_code\": \"PAYROLL_LOAN_RELEASE_CREDIT\"\n  }\n  ```\n\n## Internal Operation Status Change Notification\n\nSome statuses changes will fire a notification call to the client.\n\nTo receive this notifications, its necessary to request the registration of the service URL which will receive the notification object.\n\nThis object will be sent as a HTTP call with the POST method, of which the client must respond with a 200 status.\n\n| Event Type          | Internal Operation Status     |\n|-------------------- | -------------- |\n| `backoffice_internal_operation_not_confirmed` | NOT_CONFIRMED |\n| `backoffice_internal_operation_rejected` | REJECTED |\n| `backoffice_internal_operation_error` | ERROR |\n| `backoffice_internal_operation_done` | DONE |\n\n### Notification Call Scheme\n\n#### *Header*\n```json\n{\n  X-R4-Application: GUID, // Application Unique Identifier\n  X-R4-Delivery: GUID, // Attempt Unique Identifier\n  X-R4-Event: {event_type}, // Event Type for the Notification (as described in Event Type table)\n  User-Agent: R4-Hookshot\n}\n```\n\n#### *Body*\n```\n{\n  \"object_kind\": \"{event_type}\", // Event Type for the Notification (as described in Event Type table)\n  \"object_id\": \"GUID\", // Operation Unique Identifier\n  \"account_id\": \"GUID\" // Account Unique Identifier\n  \"application_id\": \"GUID\" // Application Unique Identifier\n}\n```\n\n## Generic errors\n\nEvery request may return one of the following error formats:\n\n### 400\n\nReturned when the request schema is not valid.\n\n```json\n{\n  \"error\": {\n    \"code\": \"VALIDATION_FAILED\",\n    \"message\": \"Invalid request data\",\n    \"details\": [\n      {\n        \"message\": \"Some error message\",\n        \"path\": [\n          \"query\",\n          \"status\",\n          0\n        ],\n        \"type\": \"any.only\",\n        \"context\": {\n          \"valids\": [\n            \"CREATED\",\n            \"PROCESSING\",\n            \"PROCESSED\",\n            \"ERROR\"\n          ],\n          \"label\": \"query.status[0]\",\n          \"value\": \"ERRORe\",\n          \"key\": 0\n        }\n      }\n    ]\n  }\n}\n```\n\n### 401\n\nReturned when request is unauthorized\n\n```json\n{\n  \"code\": \"AUTHENTICATION_FAILED\",\n  \"message\": \"Authentication failed.\"\n}\n```\n\n### 403\n\nReturned when request is forbidden\n\n```json\n{\n  \"code\": \"MISSING_PRODUCT_PERMISSION\",\n  \"message\": \"Missing product permission.\"\n}\n```\n```json\n{\n  \"code\": \"PRODUCT_DISABLED\",\n  \"message\": \"Product is not enabled.\"\n}\n```\n```json\n{\n  \"code\": \"APPLICATION_PRODUCT_NOT_FOUND\",\n  \"message\": \"Product not found for given application id.\"\n}\n```\n```json\n{\n  \"code\": \"PROFILE_NOT_FOUND\",\n  \"message\": \"Profile not found.\"\n}\n```\n\n### 404\n\nReturned when resource is not found\n\n```json\n\n{\n  \"code\": \"NOT_FOUND\",\n  \"message\": \"Unable to found the requested account.\"\n}\n```\n\n### 5xx\n\nReturned when a request fails and it is our fault\n\n```json\n{\n  \"statusCode\": 500,\n  \"message\": \"Unexpected error with our service\",\n  \"code\": \"INTERNAL_SERVER_ERROR\"\n}\n```\n"
  },
  "servers": [
    {
      "description": "Development",
      "url": "https://api-dev.bancorandon.com/baas/backoffice"
    },
    {
      "description": "Production",
      "url": "https://api.bancorandon.com/baas/backoffice"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "BaaS Backoffice",
      "description": "BaaS Backoffice"
    }
  ],
  "paths": {
    "/status": {
      "get": {
        "tags": [
          "BaaS Backoffice"
        ],
        "summary": "API Health Check",
        "operationId": "GetStatus",
        "description": "API Health Check",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/in32/{year}/{month}": {
      "get": {
        "tags": [
          "IN32 File"
        ],
        "summary": "Get in32 File",
        "operationId": "GetIn32YearMonth",
        "description": "IN32 Report",
        "parameters": [
          {
            "in": "path",
            "name": "year",
            "schema": {
              "type": "integer",
              "minLength": 4,
              "maxLength": 4,
              "example": 2022
            },
            "required": true
          },
          {
            "in": "path",
            "name": "month",
            "schema": {
              "type": "integer",
              "minLength": 1,
              "maxLength": 2,
              "example": 5
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "example": "Jose Silva"
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "example": "josesilva@mail.com"
            }
          },
          {
            "in": "query",
            "name": "phone_number",
            "schema": {
              "type": "string",
              "example": "11971625362"
            }
          },
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "type": "string",
              "enum": [
                "INFORM",
                "ADJUSTMENT"
              ],
              "example": "INFORM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "in32 File",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "DtArquivo": {
                      "type": "string",
                      "example": "2022-06-13",
                      "xml": {
                        "attribute": true
                      }
                    },
                    "Ano": {
                      "type": "integer",
                      "example": 2022,
                      "xml": {
                        "attribute": true
                      }
                    },
                    "Mes": {
                      "type": "string",
                      "example": "05",
                      "xml": {
                        "attribute": true
                      }
                    },
                    "ISPB": {
                      "type": "integer",
                      "example": 12548,
                      "xml": {
                        "attribute": true
                      }
                    },
                    "NomeResp": {
                      "type": "string",
                      "example": "Jose Silva",
                      "xml": {
                        "attribute": true
                      }
                    },
                    "EmailResp": {
                      "type": "string",
                      "example": "josesilva@mail.com.br",
                      "xml": {
                        "attribute": true
                      }
                    },
                    "TelResp": {
                      "type": "string",
                      "example": 5551985856554,
                      "xml": {
                        "attribute": true
                      }
                    },
                    "TipoEnvio": {
                      "type": "string",
                      "enum": [
                        "I (INFORM)",
                        "S (ADJUSTMENT)"
                      ],
                      "example": "I",
                      "xml": {
                        "attribute": true
                      }
                    },
                    "Transacoes": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "Transacao": {
                            "type": "object",
                            "properties": {
                              "QtdTransacoes": {
                                "type": "integer"
                              },
                              "ValorTransacoes": {
                                "type": "number"
                              },
                              "ValorEspecie": {
                                "type": "number"
                              },
                              "DetalhamentoTransacoes": {
                                "type": "integer"
                              },
                              "FinalidadeTransacoes": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    },
                    "Devolucoes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Devolucao": {
                            "type": "object",
                            "properties": {
                              "QtdDevolucoes": {
                                "type": "integer"
                              },
                              "ValorDevolucoes": {
                                "type": "number"
                              },
                              "DetalhamentoDevolucoes": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    "BloqueiosCautelares": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "BloqueioCautelar": {
                            "type": "object",
                            "properties": {
                              "QtdeBloqCaut": {
                                "type": "integer"
                              },
                              "ValorBloqCaut": {
                                "type": "number"
                              },
                              "DetalhamentoTransacoesBloqCaut": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    },
                    "Receitas": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "Receita": {
                            "type": "object",
                            "properties": {
                              "ValorReceita": {
                                "type": "number"
                              },
                              "FonteReceita": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    },
                    "TemposTransacoes": {
                      "type": "object",
                      "properties": {
                        "Perc50TempoExpUsuarioLiqSPI": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "Perc99TempoExpUsuarioLiqSPI": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "Perc50TempoExpUsuarioLiqForaSPI": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "Perc99TempoExpUsuarioLiqForaSPI": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "TempoMaxBloqueioCautelar": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        }
                      }
                    },
                    "TemposDict": {
                      "type": "object",
                      "properties": {
                        "Perc99TempoUsuarioConsulta": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "PercTempoEnvioRegistro": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "PercTempoExpUsuarioRegistro": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "PercTempoExpUsuarioExclusao": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "PercTempoNotificacaoPortabilidade": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "PercTempoEnvioPortabilidade": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        },
                        "PercTempoAberturaNotificacao": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        }
                      }
                    },
                    "ConsultasDict": {
                      "type": "object",
                      "properties": {
                        "QtdConsultas": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        }
                      }
                    },
                    "Disponibilidade": {
                      "type": "object",
                      "properties": {
                        "IndiceDisponibilidade": {
                          "type": "integer",
                          "xml": {
                            "attribute": true
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "APIX001"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/internal-operation": {
      "post": {
        "tags": [
          "Internal Operation"
        ],
        "summary": "Create an internal operation in specific account",
        "operationId": "PostInternalOperation",
        "description": "Allows to create an internal banking operation in specific account.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Id from operation movement",
                    "type": "string",
                    "format": "uuid-v4",
                    "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                  },
                  "account_number": {
                    "description": "Account number",
                    "type": "number",
                    "example": 1234567
                  },
                  "account_digit": {
                    "description": "Account digit",
                    "type": "number",
                    "example": 7
                  },
                  "agency_number": {
                    "description": "Agency number from account",
                    "type": "number",
                    "example": 1
                  },
                  "value": {
                    "description": "Operation value",
                    "type": "number",
                    "example": 10.12
                  },
                  "history_code": {
                    "description": "The operation history code",
                    "type": "string",
                    "enum": [
                      "PAYROLL_LOAN_RELEASE_CREDIT"
                    ],
                    "example": "PAYROLL_LOAN_RELEASE_CREDIT"
                  }
                },
                "required": [
                  "id",
                  "account_number",
                  "account_digit",
                  "agency_number",
                  "value",
                  "history_code"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Internal Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Id from operation movement",
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "account_id": {
                      "description": "Id from account",
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "application_id": {
                      "description": "Id from application",
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "status": {
                      "description": "Operation status",
                      "type": "string",
                      "example": "CREATED",
                      "enum": [
                        "CREATED",
                        "CONFIRMING",
                        "NOT_CONFIRMED",
                        "CONFIRMED",
                        "PROCESSING",
                        "DONE",
                        "ERROR",
                        "REJECTED"
                      ]
                    },
                    "value": {
                      "description": "Operation value",
                      "type": "number",
                      "example": 10.12
                    },
                    "history_code": {
                      "description": "The operation history code",
                      "type": "string",
                      "enum": [
                        "PAYROLL_LOAN_RELEASE_CREDIT"
                      ],
                      "example": "PAYROLL_LOAN_RELEASE_CREDIT"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error with types [AccountNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Account Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "ACCOUNT_NOT_FOUND",
                          "enum": [
                            "ACCOUNT_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Account not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "ACCOUNT_NOT_FOUND",
                  "message": "Account not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Operation already exists",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "Internal Operation already exists",
                          "enum": [
                            "INTERNAL_OPERATION_ALREADY_EXISTS"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Internal Operation already exists"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "409"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "INTERNAL_OPERATION_ALREADY_EXISTS",
                  "message": "Internal Operation already exists."
                }
              }
            }
          }
        }
      }
    },
    "/internal-operation/{id}": {
      "get": {
        "tags": [
          "Internal Operation"
        ],
        "summary": "Get an operation",
        "operationId": "GeInternalOperationId",
        "description": "Return an operation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique identifier of the internal operation.",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Internal operation returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Describes the properties of returned operation.",
                  "required": [
                    "id",
                    "application_id",
                    "value",
                    "history_code",
                    "status",
                    "created_at",
                    "updated_at",
                    "occurrences"
                  ],
                  "properties": {
                    "id": {
                      "description": "Id from operation movement",
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "account_id": {
                      "description": "Id from account",
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "application_id": {
                      "description": "Id from application",
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "statement_id": {
                      "description": "Id from statement",
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "status": {
                      "description": "Operation status",
                      "type": "string",
                      "example": "CREATED"
                    },
                    "value": {
                      "description": "Operation value",
                      "type": "number",
                      "example": 10.12
                    },
                    "history_code": {
                      "description": "The operation history code",
                      "type": "string",
                      "enum": [
                        "PAYROLL_LOAN_RELEASE_CREDIT"
                      ],
                      "example": "PAYROLL_LOAN_RELEASE_CREDIT"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The operation's created at",
                      "example": "2022-01-13T13:53:01.463Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The operation's updated at",
                      "example": "2022-01-13T13:53:01.463Z"
                    },
                    "occurrences": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Occurrences from operation",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "Status from occurrence",
                            "enum": [
                              "CREATED",
                              "NOT_CONFIRMED",
                              "CONFIRMED",
                              "DONE",
                              "ERROR",
                              "REJECTED"
                            ]
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The operation's occurrence created at",
                            "example": "2022-01-13T13:53:01.463Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error with types [OperationNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Operation Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "OPERATION_NOT_FOUND",
                          "enum": [
                            "OPERATION_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Operation not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "OPERATION_NOT_FOUND",
                  "message": "Operation not found."
                }
              }
            }
          }
        }
      }
    },
    "/antifraud/pix": {
      "get": {
        "tags": [
          "Antifraud Analysis"
        ],
        "summary": "Get a list payments with pending antifraud analysis",
        "operationId": "GetAntifraudPix",
        "description": "List payments with pending antifraud analysis",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "schema": {
              "type": "string"
            },
            "description": "Unique application identifier",
            "required": true
          },
          {
            "in": "query",
            "name": "after",
            "schema": {
              "type": "string"
            },
            "description": "Filter to search for payments after the given amount",
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string"
            },
            "description": "Filter to search for payments before the given amount",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Number of payments to be returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of payments with pending antifraud analysis",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Properties of payment.",
                        "required": [
                          "id",
                          "account_id",
                          "application_id",
                          "operation",
                          "kind",
                          "payment_priority",
                          "type_payment_priority",
                          "goal",
                          "payer",
                          "recipient",
                          "value",
                          "description",
                          "status",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid-v4",
                            "description": "Unique payment identifier",
                            "example": "55c23fe3-d77e-484a-9b9e-f5642e459df8"
                          },
                          "application_id": {
                            "type": "string",
                            "format": "uuid-v4",
                            "description": "Unique application identifier",
                            "example": "55c23fe3-d77e-484a-9b9e-f5642e459df8"
                          },
                          "account_id": {
                            "type": "string",
                            "format": "uuid-v4",
                            "description": "Unique account identifier",
                            "example": "55c23fe3-d77e-484a-9b9e-f5642e459df8"
                          },
                          "end_to_end_id": {
                            "type": "string",
                            "description": "Payment's end to end id",
                            "example": "E5c23fe3-d77e-484a-9b9e-f5642e459df8"
                          },
                          "operation": {
                            "type": "string",
                            "enum": [
                              "CREDIT",
                              "DEBIT"
                            ],
                            "description": "Type of operation",
                            "example": "CREDIT"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "MANUAL",
                              "KEY",
                              "STATIC_QRCODE",
                              "DYNAMIC_QRCODE",
                              "PAYMENT_TRANSACTION_SERVICE",
                              "PAYER_QRCODE"
                            ],
                            "description": "Type of mechanism used to start the payment",
                            "example": "KEY"
                          },
                          "payment_priority": {
                            "type": "string",
                            "enum": [
                              "SCHEDULED",
                              "IMMEDIATE"
                            ],
                            "description": "Indicates whether liquidation is priority or not",
                            "example": "IMMEDIATE"
                          },
                          "type_payment_priority": {
                            "type": "string",
                            "enum": [
                              "SCHEDULED_PAYMENT",
                              "PRIORITY_PAYMENT",
                              "FRAUD_ANALYSIS_PAYMENT"
                            ],
                            "description": "Indicate whether it is a priority transaction or not",
                            "example": "PRIORITY_PAYMENT"
                          },
                          "goal": {
                            "type": "string",
                            "enum": [
                              "CHANGE",
                              "WITHDRAW",
                              "BUY_OR_TRANSFER"
                            ],
                            "description": "Payment's goal",
                            "example": "BUY_OR_TRANSFER"
                          },
                          "withdraw_ispb": {
                            "type": "number",
                            "description": "Withdraw service provider ISBP",
                            "example": 11476673
                          },
                          "value": {
                            "type": "number",
                            "description": "Payment's value",
                            "example": 10.99
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "CREATED",
                              "CONFIRMING",
                              "CONFIRMED",
                              "NOT_CONFIRMED",
                              "PROCESSING",
                              "PROCESSED",
                              "REJECTED",
                              "ERROR",
                              "DONE"
                            ],
                            "description": "Payment's status",
                            "example": "CREATED"
                          },
                          "remaining_value": {
                            "type": "number",
                            "description": "Remaining value",
                            "example": 500
                          },
                          "agent_modality": {
                            "type": "string",
                            "enum": [
                              "WITHDRAW_SERVICE_AGENT",
                              "COMMERCIAL_ESTABLISHMENT_AGENT",
                              "AGENT_OR_OTHER_LEGAL_ENTITY"
                            ],
                            "description": "Agent modality of the withdraw",
                            "example": "COMMERCIAL_ESTABLISHMENT_AGENT"
                          },
                          "document_payment_initiator": {
                            "type": "number",
                            "description": "CNPJ of the payment initiator institution",
                            "example": 37650221000115
                          },
                          "key": {
                            "type": "string",
                            "description": "Recipient's key",
                            "example": 85801560025
                          },
                          "description": {
                            "type": "string",
                            "description": "Payment's description",
                            "example": "Payment description"
                          },
                          "conciliation_id": {
                            "type": "string",
                            "description": "Unique payment's conciliation identifier",
                            "example": "PI2020010300000000000000000000001"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Payment's created at",
                            "example": "2023-09-19T13:53:01.463Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "The payment's updated at",
                            "example": "2023-09-19T13:53:01.463Z"
                          },
                          "initiation_channel": {
                            "type": "string",
                            "enum": [
                              "AGENCY",
                              "APP",
                              "ATM",
                              "CALL_CENTER",
                              "INTERNET_BANKING"
                            ],
                            "description": "Property indicates the payment initiation channel",
                            "example": "INTERNET_BANKING"
                          },
                          "open_banking": {
                            "type": "boolean",
                            "description": "Indicates that the payment was initiated in the Open Banking",
                            "example": true,
                            "default": false
                          },
                          "initiator_name": {
                            "type": "string",
                            "description": "Name of the payment initiator institution",
                            "example": "XPTO BANK",
                            "maxLength": 80
                          },
                          "payer": {
                            "type": "object",
                            "description": "Describes properties of payer",
                            "required": [
                              "ispb",
                              "document_type",
                              "document_number",
                              "name",
                              "account_type",
                              "account_number",
                              "account_digit"
                            ],
                            "properties": {
                              "ispb": {
                                "type": "number",
                                "description": "ISPB number",
                                "example": 11476673
                              },
                              "document_type": {
                                "type": "string",
                                "description": "Payer's document type",
                                "enum": [
                                  "CPF",
                                  "CNPJ"
                                ],
                                "example": "CPF"
                              },
                              "document_number": {
                                "type": "number",
                                "description": "Payer's document number",
                                "example": 18612366038
                              },
                              "name": {
                                "type": "string",
                                "description": "Payer's name",
                                "example": "Payer name"
                              },
                              "agency_number": {
                                "type": "number",
                                "description": "Payer's agency number",
                                "example": 1234
                              },
                              "account_type": {
                                "type": "string",
                                "description": "Payer's account type",
                                "enum": [
                                  "CHECKING_ACCOUNT",
                                  "SAVINGS_ACCOUNT",
                                  "CONTROL_ACCOUNT",
                                  "GRAPHIC_ACCOUNT",
                                  "PAYMENT_ACCOUNT",
                                  "SALARY_ACCOUNT"
                                ],
                                "example": "CHECKING_ACCOUNT"
                              },
                              "account_number": {
                                "type": "number",
                                "description": "Payer's account number",
                                "example": 12319
                              },
                              "account_digit": {
                                "type": "number",
                                "description": "Payer's account digit",
                                "example": 1
                              }
                            }
                          },
                          "recipient": {
                            "type": "object",
                            "description": "Describes properties of recipient",
                            "required": [
                              "ispb",
                              "document_type",
                              "document_number",
                              "account_type",
                              "account_number",
                              "account_digit"
                            ],
                            "properties": {
                              "ispb": {
                                "type": "number",
                                "description": "ISPB number",
                                "example": 11476673
                              },
                              "document_type": {
                                "type": "string",
                                "description": "Recipient's document type",
                                "enum": [
                                  "CPF",
                                  "CNPJ"
                                ]
                              },
                              "document_number": {
                                "type": "number",
                                "description": "Recipient's document number",
                                "example": 18612366038
                              },
                              "name": {
                                "type": "string",
                                "description": "Recipient's name",
                                "example": "Recipient name",
                                "maxLength": 140
                              },
                              "agency_number": {
                                "type": "number",
                                "description": "Recipient's agency number",
                                "example": 1234
                              },
                              "account_type": {
                                "type": "string",
                                "description": "Recipient's account type",
                                "enum": [
                                  "CHECKING_ACCOUNT",
                                  "SAVINGS_ACCOUNT",
                                  "CONTROL_ACCOUNT",
                                  "GRAPHIC_ACCOUNT",
                                  "PAYMENT_ACCOUNT",
                                  "SALARY_ACCOUNT"
                                ],
                                "example": "CHECKING_ACCOUNT"
                              },
                              "account_number": {
                                "type": "number",
                                "description": "Recipient's account number",
                                "example": 12319
                              },
                              "account_digit": {
                                "type": "number",
                                "description": "Recipient's account digit",
                                "example": 1
                              }
                            }
                          },
                          "value_details": {
                            "type": "array",
                            "description": "The element group used to break down payment amounts\n\n* If the goal is equal to `BUY_OR_TRANSFER` do not inform this field.\n* If the goal is equal to `CHANGE` is mandatory to inform two different\ngroups, one with the kind equal to `PURCHASE_AMOUNT` and another with\nthe kind equal to `AVAILABLE_CASH`.\n* If the goal is equal to `WITHDRAW` is mandatory to inform one group with\nthe kind equal to `AVAILABLE_CASH`.\n",
                            "items": {
                              "type": "object",
                              "required": [
                                "kind",
                                "value"
                              ],
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "PURCHASE_AMOUNT",
                                    "AVAILABLE_CASH"
                                  ],
                                  "description": "The value kind.\n\n* `PURCHASE_AMOUNT`: The purchase amount\n* `AVAILABLE_CASH`: Value of the resource in kind provided.\n",
                                  "example": "AVAILABLE_CASH"
                                },
                                "value": {
                                  "type": "number",
                                  "description": "The purchase value or the value of the resource in kind provided\n",
                                  "example": 10.99
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "cursor": {
                      "type": "object",
                      "properties": {
                        "after": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the last item of the list. If no more items exist, the property is removed from the response"
                        },
                        "before": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the first item of the list. If its the first available item, the property is removed from the response"
                        },
                        "limit": {
                          "type": "number",
                          "format": "base64",
                          "description": "number of items to return",
                          "example": 10
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Cursor Decoder Error",
                  "properties": {
                    "code": {
                      "description": "The type of error",
                      "type": "string",
                      "example": "CURSOR_DECODED"
                    },
                    "message": {
                      "description": "Describes a message informing a reason for the error",
                      "type": "string",
                      "example": "Error to decode cursor"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/antifraud/pix/{id}/unblock": {
      "post": {
        "tags": [
          "Antifraud Analysis"
        ],
        "summary": "Unblock a transaction.",
        "operationId": "PostAntifraudPixIdUnblock",
        "description": "Unblock a transaction.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique identifier of the transaction.",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "BLOCK_NOT_FOUND",
                  "message": "Block not found"
                }
              }
            }
          }
        }
      }
    },
    "/antifraud/pix/fraud": {
      "post": {
        "tags": [
          "Antifraud Analysis"
        ],
        "summary": "Create fraud mark",
        "operationId": "PostAntifraudPixFraud",
        "description": "Create and returns information about created fraud mark",
        "parameters": [
          {
            "in": "header",
            "name": "Idempotence-Key",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Describes the properties.",
                "required": [
                  "ispb",
                  "document_number",
                  "document_type",
                  "kind"
                ],
                "properties": {
                  "ispb": {
                    "type": "number",
                    "description": "ISPB from fraud marking",
                    "example": 123456789
                  },
                  "document_number": {
                    "type": "number",
                    "description": "User document number",
                    "example": 12345678911
                  },
                  "document_type": {
                    "type": "string",
                    "description": "User document type",
                    "enum": [
                      "CPF",
                      "CNPJ"
                    ]
                  },
                  "key": {
                    "type": "string",
                    "description": "User key to mark fraud",
                    "example": "+5554999999999"
                  },
                  "kind": {
                    "type": "string",
                    "description": "Kind of fraud marking",
                    "enum": [
                      "APPLICATION_FRAUD",
                      "MULE_ACCOUNT",
                      "SCAMMER_ACCOUNT",
                      "OTHERS"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Verification result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Describes the properties of key verification.",
                  "required": [
                    "keys"
                  ],
                  "properties": {
                    "fraud_id": {
                      "type": "string",
                      "description": "Created fraud id",
                      "example": "59bfea43-95f1-4f44-8ec9-254d9109de81"
                    },
                    "correlation_id": {
                      "type": "string",
                      "description": "Correlation id from fraud",
                      "example": "B2023102010013637811476673153F13"
                    },
                    "situation": {
                      "type": "string",
                      "description": "Situation from fraud Mark",
                      "enum": [
                        "REGISTERED"
                      ]
                    },
                    "responded_at": {
                      "type": "string",
                      "description": "Dict responded at",
                      "example": "2023-10-20T13:01:36.411Z"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Fraud mark created at",
                      "example": "2023-10-20T13:01:36.411Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Fraud mark last update",
                      "example": "2023-10-20T13:01:36.411Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Invalid Data Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "INVALID_DATA",
                              "enum": [
                                "INVALID_DATA"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "The data provided has an invalid format"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "400"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Invalid Idempotence Key Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "INVALID_IDEMPOTENCE_KEY",
                              "enum": [
                                "INVALID_IDEMPOTENCE_KEY"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "The data provided has an invalid format"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "400"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Example 1 - InvalidDataError": {
                    "value": {
                      "code": "INVALID_DATA",
                      "message": "The data provided has an invalid format"
                    }
                  },
                  "Example 2 - InvalidIdempotenceKeyError": {
                    "value": {
                      "code": "INVALID_IDEMPOTENCE_KEY",
                      "message": "Idempotence Key is missing or is not a valid uuid."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Antifraud Analysis"
        ],
        "summary": "List frauds",
        "operationId": "GetAntifraudAnalysis",
        "description": "List information about fraud marks",
        "parameters": [
          {
            "in": "query",
            "name": "ispb",
            "schema": {
              "type": "number",
              "example": 11476673,
              "description": "ISPB to filter"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "document_number",
            "schema": {
              "type": "number",
              "example": 12345678911,
              "description": "Document number to filter"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string",
              "example": "+5554999999999",
              "description": "Key to filter"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "type": "string",
              "description": "Fraud kind to filter",
              "enum": [
                "APPLICATION_FRAUD",
                "MULE_ACCOUNT",
                "SCAMMER_ACCOUNT",
                "OTHERS"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "situation",
            "schema": {
              "type": "string",
              "description": "Fraud situation to filter",
              "enum": [
                "REGISTERED",
                "CANCELED"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "created_at_start",
            "schema": {
              "type": "string",
              "format": "dateTime",
              "example": "2023-10-20T13:01:36.386Z",
              "description": "Filter by more then created at field"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "created_at_end",
            "schema": {
              "type": "string",
              "format": "dateTime",
              "example": "2023-10-20T13:01:36.386Z",
              "description": "Filter by less then created at field"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "example": 1,
              "description": "Page to return"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "string",
              "example": 10,
              "description": "Quantity of registers to return in a page"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List result.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "responded_at",
                    "data",
                    "pagination"
                  ],
                  "type": "object",
                  "description": "Describes the properties of fraud list.",
                  "properties": {
                    "responded_at": {
                      "type": "string",
                      "format": "dateTime",
                      "example": "2023-10-24T13:56:23.832Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "fraud_id": {
                            "type": "string",
                            "format": "uuid-v4",
                            "example": "ff4dd014-8e95-455e-b38b-1f0ecac06bb7",
                            "description": "Id from fraud"
                          },
                          "key": {
                            "type": "string",
                            "example": "+5554999999999",
                            "description": "Key from fraud"
                          },
                          "document_number": {
                            "type": "number",
                            "example": 13544528002,
                            "description": "Document from fraud"
                          },
                          "document_type": {
                            "type": "string",
                            "enum": [
                              "CPF",
                              "CNPJ"
                            ],
                            "description": "Document type from fraud"
                          },
                          "kind": {
                            "type": "string",
                            "description": "Fraud kind",
                            "enum": [
                              "APPLICATION_FRAUD",
                              "MULE_ACCOUNT",
                              "SCAMMER_ACCOUNT",
                              "OTHERS"
                            ]
                          },
                          "situation": {
                            "type": "string",
                            "description": "Fraud situation",
                            "enum": [
                              "REGISTERED",
                              "CANCELED"
                            ]
                          },
                          "created_at": {
                            "type": "string",
                            "format": "dateTime",
                            "example": "2023-10-20T13:01:36.386Z",
                            "description": "Filter by less then created at field"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "dateTime",
                            "example": "2023-10-20T13:01:36.386Z",
                            "description": "Filter by less then created at field"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 100,
                          "description": "Total number of registers"
                        },
                        "page": {
                          "type": "number",
                          "example": 1,
                          "description": "Page number"
                        },
                        "limit": {
                          "type": "number",
                          "example": 50,
                          "description": "Quantity of registers limited"
                        },
                        "has_previous_page": {
                          "type": "boolean",
                          "description": "Return if have more previous pages"
                        },
                        "has_next_page": {
                          "type": "boolean",
                          "description": "Return if have more next pages"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Invalid Data Error",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INVALID_DATA",
                          "enum": [
                            "INVALID_DATA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "The data provided has an invalid format"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "Example 1 - InvalidDataError": {
                    "value": {
                      "code": "INVALID_DATA",
                      "message": "The data provided has an invalid format"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/antifraud/pix/fraud/{id}": {
      "get": {
        "tags": [
          "Antifraud Analysis"
        ],
        "summary": "Get a fraud marking by id",
        "operationId": "GetAntifraudPixFraudId",
        "description": "Get a fraud marking for a specific id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid-v4"
            },
            "required": true,
            "description": "ID of the fraud marking to get."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get fraud marking",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Describes the properties of fraud marking",
                  "required": [
                    "fraud_id",
                    "correlation_id",
                    "document_number",
                    "document_type",
                    "kind",
                    "situation",
                    "responded_at",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "fraud_id": {
                      "type": "string",
                      "description": "Created fraud id",
                      "example": "59bfea43-95f1-4f44-8ec9-254d9109de81"
                    },
                    "correlation_id": {
                      "type": "string",
                      "description": "Correlation id from fraud",
                      "example": "B2023102010013637811476673153F13"
                    },
                    "document_number": {
                      "type": "number",
                      "description": "User document number to which the fraud marking.",
                      "example": 37722745091
                    },
                    "document_type": {
                      "type": "string",
                      "description": "User document type.",
                      "enum": [
                        "CPF",
                        "CNPJ"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Pix key to which the fraud. It must be entered, if known",
                      "example": "+55519999999"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind of fraud marking",
                      "enum": [
                        "APPLICATION_FRAUD",
                        "MULE_ACCOUNT",
                        "SCAMMER_ACCOUNT",
                        "OTHERS",
                        "UNKNOWN"
                      ],
                      "example": "APPLICATION_FRAUD"
                    },
                    "situation": {
                      "type": "string",
                      "description": "Situation from fraud Mark",
                      "enum": [
                        "REGISTERED",
                        "CANCELLED"
                      ],
                      "example": "CANCELLED"
                    },
                    "responded_at": {
                      "type": "string",
                      "description": "Dict responded at",
                      "example": "2023-10-20T13:01:36.411Z"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Fraud mark created at",
                      "example": "2023-10-20T13:01:36.411Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Fraud mark last update",
                      "example": "2023-10-20T13:01:36.411Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "FRAUD_MARKING_NOT_FOUND",
                  "message": "The provided fraud marking was not found or does not exist"
                }
              }
            }
          }
        }
      }
    },
    "/antifraud/pix/fraud/{id}/cancel": {
      "post": {
        "tags": [
          "Antifraud Analysis"
        ],
        "summary": "Cancel fraud mark",
        "operationId": "PostAntifraudPixFraudIdCancel",
        "description": "Cancel and returns information about canceled fraud mark",
        "parameters": [
          {
            "in": "header",
            "name": "Idempotence-Key",
            "schema": {
              "type": "string",
              "format": "uuid-v4",
              "example": "59bfea43-95f1-4f44-8ec9-254d9109de81"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid-v4",
              "example": "59bfea43-95f1-4f44-8ec9-254d9109de81"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Describes the properties.",
                "required": [
                  "ispb"
                ],
                "properties": {
                  "ispb": {
                    "type": "number",
                    "description": "ISPB from fraud marking",
                    "example": 123456789
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Canceled result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Describes the properties of caneled fraud.",
                  "required": [
                    "fraud_id",
                    "correlation_id",
                    "situation",
                    "responded_at",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "fraud_id": {
                      "type": "string",
                      "description": "Created fraud id",
                      "example": "59bfea43-95f1-4f44-8ec9-254d9109de81"
                    },
                    "correlation_id": {
                      "type": "string",
                      "description": "Correlation id from fraud",
                      "example": "B2023102010013637811476673153F13"
                    },
                    "situation": {
                      "type": "string",
                      "description": "Situation from fraud Mark",
                      "enum": [
                        "CANCELED"
                      ]
                    },
                    "responded_at": {
                      "type": "string",
                      "description": "Dict responded at",
                      "example": "2023-10-20T13:01:36.411Z"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Fraud mark created at",
                      "example": "2023-10-20T13:01:36.411Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Fraud mark last update",
                      "example": "2023-10-20T13:01:36.411Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Invalid Data Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "INVALID_DATA",
                              "enum": [
                                "INVALID_DATA"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "The data provided has an invalid format"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "400"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Invalid Idempotence Key Error",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "INVALID_IDEMPOTENCE_KEY",
                              "enum": [
                                "INVALID_IDEMPOTENCE_KEY"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "The data provided has an invalid format"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "400"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Example 1 - InvalidDataError": {
                    "value": {
                      "code": "INVALID_DATA",
                      "message": "The data provided has an invalid format"
                    }
                  },
                  "Example 2 - InvalidIdempotenceKeyError": {
                    "value": {
                      "code": "INVALID_IDEMPOTENCE_KEY",
                      "message": "Idempotence Key is missing or is not a valid uuid."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "The fraud mark can only be canceled by creator ispb or ispb who close the fraud mark",
                  "properties": {
                    "code": {
                      "type": "string",
                      "title": "Error code",
                      "description": "The type of error",
                      "example": "ISPB_NOT_PERMITED",
                      "enum": [
                        "ISPB_NOT_PERMITED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "title": "Error message",
                      "description": "Describes a message informing a reason for the error",
                      "example": "The fraud mark can only be canceled by creator ispb or ispb who close the fraud mark"
                    },
                    "status_code": {
                      "type": "number",
                      "description": "Error status code",
                      "example": "403"
                    }
                  }
                },
                "example": {
                  "code": "ISPB_NOT_PERMITED",
                  "message": "The fraud mark can only be canceled by creator ispb or ispb who close the fraud mark"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "The provided fraud marking was not found or does not exist",
                  "properties": {
                    "code": {
                      "type": "string",
                      "title": "Error code",
                      "description": "The type of error",
                      "example": "FRAUD_MARKING_NOT_FOUND",
                      "enum": [
                        "FRAUD_MARKING_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "title": "Error message",
                      "description": "Describes a message informing a reason for the error",
                      "example": "The provided fraud marking was not found or does not exist"
                    },
                    "status_code": {
                      "type": "number",
                      "description": "Error status code",
                      "example": "404"
                    }
                  }
                },
                "example": {
                  "code": "FRAUD_MARKING_NOT_FOUND",
                  "message": "The provided fraud marking was not found or does not exist"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "title": "The fraud mark was already canceled.",
                  "properties": {
                    "code": {
                      "type": "string",
                      "title": "Error code",
                      "description": "The type of error",
                      "example": "FRAUD_MARKING_ALREADY_CANCELED",
                      "enum": [
                        "FRAUD_MARKING_ALREADY_CANCELED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "title": "Error message",
                      "description": "Describes a message informing a reason for the error",
                      "example": "The fraud mark was already canceled."
                    },
                    "status_code": {
                      "type": "number",
                      "description": "Error status code",
                      "example": "409"
                    }
                  }
                },
                "example": {
                  "code": "FRAUD_MARKING_ALREADY_CANCELED",
                  "message": "The fraud mark was already canceled."
                }
              }
            }
          }
        }
      }
    },
    "/invest/products/{product_id}": {
      "patch": {
        "tags": [
          "Invest Operation"
        ],
        "summary": "Update a product from invest operation",
        "operationId": "PatchInvestProductsProductId",
        "description": "Update a product from invest operation.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "schema": {
              "type": "string",
              "format": "uuid-v4",
              "example": "e9f9d165-a9cd-4e87-bf72-805ecee5ded0"
            },
            "description": "Product identification code",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "expiration_term": {
                    "type": "number",
                    "description": "Indicates the time of investment have to expire",
                    "example": 360
                  }
                },
                "required": [
                  "expiration_term"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated with success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid-v4",
                      "example": "f6ee2b64-1c5d-4504-bb52-6f79e02d1006",
                      "description": "Product's id"
                    },
                    "person_kind": {
                      "type": "string",
                      "enum": [
                        "NATURAL_PERSON",
                        "LEGAL_PERSON"
                      ],
                      "description": "Person kind"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ACTIVE",
                        "INACTIVE"
                      ],
                      "description": "Status from product"
                    },
                    "product": {
                      "type": "string",
                      "description": "The name or identifier of the investment product",
                      "example": "CDB - CDI - Taxa Flutuante"
                    },
                    "kind": {
                      "type": "string",
                      "description": "The type or category of the investment product",
                      "example": "Pos-Fixada"
                    },
                    "profitability": {
                      "type": "number",
                      "description": "The profitability or interest rate of the investment product",
                      "example": 5.2
                    },
                    "indexer": {
                      "type": "string",
                      "description": "The financial index used to calculate the profitability",
                      "example": "CDI"
                    },
                    "term": {
                      "type": "number",
                      "description": "The duration or term of the investment product in days",
                      "example": 9998
                    },
                    "maturity_date": {
                      "type": "string",
                      "description": "The date when the investment product matures",
                      "example": "2050-09-24"
                    },
                    "minimum_value": {
                      "type": "number",
                      "description": "The minimum investment amount required for the product",
                      "example": 100
                    },
                    "grace_period": {
                      "type": "number",
                      "description": "The grace period in days for the investment product",
                      "example": 1
                    },
                    "grace_date": {
                      "type": "string",
                      "description": "Calculated grace date from grace period",
                      "example": "2024-04-30T00:00:00.000Z"
                    },
                    "liquidity": {
                      "type": "string",
                      "description": "The liquidity frequency of the investment product",
                      "example": "Diaria"
                    },
                    "repurchase_grace_period": {
                      "type": "number",
                      "description": "The repurchase grace period in days for the investment product",
                      "example": 1
                    },
                    "calculation_criteria": {
                      "type": "string",
                      "description": "The criteria used for calculating the investment product",
                      "example": "PRE"
                    },
                    "criteria_type": {
                      "type": "string",
                      "description": "The type of criteria used",
                      "example": "CONTABIL"
                    },
                    "paper_type": {
                      "type": "string",
                      "description": "The type of financial instrument",
                      "example": "CDB"
                    },
                    "income_type": {
                      "type": "string",
                      "description": "The type of income generated by the investment product",
                      "example": "PRE"
                    },
                    "tax_rate_sequence_number": {
                      "type": "number",
                      "description": "The sequence number for the tax rate applied to the investment product",
                      "example": 4
                    },
                    "automatic_application_available": {
                      "type": "boolean",
                      "description": "Indicates whether automatic application is available for the investment product"
                    },
                    "escalated": {
                      "type": "boolean",
                      "description": "Indicates whether the investment product has escalated features"
                    },
                    "redemption_form_identifier": {
                      "type": "string",
                      "description": "The identifier for the redemption form associated with the investment product",
                      "example": "FIN"
                    },
                    "scheduling_available": {
                      "type": "boolean",
                      "description": "Indicates whether scheduling is available for the investment product"
                    },
                    "expiration_term": {
                      "type": "number",
                      "description": "Indicates the time of investment have to expire",
                      "example": 360
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Expiration Term Invalid",
                      "type": "object",
                      "description": "Representation of an bad request error",
                      "properties": {
                        "code": {
                          "description": "The type of error",
                          "type": "string",
                          "example": "EXPIRATION_TERM_INVALID"
                        },
                        "message": {
                          "description": "Describes a message informing a reason for the error",
                          "type": "string",
                          "example": "Expiration term invalid, is greater then term"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "EXPIRATION_TERM_INVALID",
                  "message": "Expiration term invalid, is greater then term"
                }
              }
            }
          },
          "404": {
            "description": "Error with types [ProductNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Product not found",
                      "type": "object",
                      "description": "Representation of an not found error",
                      "properties": {
                        "code": {
                          "description": "The type of error",
                          "type": "string",
                          "example": "PRODUCT_NOT_FOUND"
                        },
                        "message": {
                          "description": "Describes a message informing a reason for the error",
                          "type": "string",
                          "example": "Product was not found."
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "PRODUCT_NOT_FOUND",
                  "message": "Product not found."
                }
              }
            }
          }
        }
      }
    },
    "/invest/products": {
      "get": {
        "tags": [
          "Invest Operation"
        ],
        "summary": "List products to invest",
        "operationId": "GetInvestProducts",
        "description": "List products to invest.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "person_kind",
            "schema": {
              "type": "string",
              "enum": [
                "NATURAL_PERSON",
                "LEGAL_PERSON"
              ]
            },
            "description": "Person kind",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "description": "Status from product",
            "required": false
          },
          {
            "in": "query",
            "name": "after",
            "schema": {
              "type": "string"
            },
            "description": "Base64 filter to bring only products after the provided value",
            "required": false
          },
          {
            "in": "query",
            "name": "order_by[field]",
            "schema": {
              "type": "string",
              "enum": [
                "MINIMUM_VALUE",
                "PROFITABILITY",
                "GRACE_PERIOD"
              ]
            },
            "description": "The field to be ordered",
            "required": false
          },
          {
            "in": "query",
            "name": "order_by[orientation]",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "description": "The orientation of the order",
            "required": false
          },
          {
            "in": "query",
            "name": "minimum_value",
            "schema": {
              "type": "number",
              "example": 100.12
            },
            "description": "The filter to bring only the exact or greater minimum value",
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string"
            },
            "description": "Base64 filter to bring only products before the provided value",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of products to return. Can be omitted if provided before or after filters with limit embedded in them. If nothing is provided, the default will be 50 as limit",
            "required": false
          },
          {
            "in": "query",
            "name": "with_expiration_term",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Indicates when products will return only with expiration time is not null",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Updated with success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid-v4",
                          "example": "f6ee2b64-1c5d-4504-bb52-6f79e02d1006",
                          "description": "Product's id"
                        },
                        "person_kind": {
                          "type": "string",
                          "enum": [
                            "NATURAL_PERSON",
                            "LEGAL_PERSON"
                          ],
                          "description": "Person kind"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "description": "Status from product"
                        },
                        "product": {
                          "type": "string",
                          "description": "The name or identifier of the investment product",
                          "example": "CDB - CDI - Taxa Flutuante"
                        },
                        "kind": {
                          "type": "string",
                          "description": "The type or category of the investment product",
                          "example": "Pos-Fixada"
                        },
                        "profitability": {
                          "type": "number",
                          "description": "The profitability or interest rate of the investment product",
                          "example": 5.2
                        },
                        "indexer": {
                          "type": "string",
                          "description": "The financial index used to calculate the profitability",
                          "example": "CDI"
                        },
                        "term": {
                          "type": "number",
                          "description": "The duration or term of the investment product in days",
                          "example": 9998
                        },
                        "maturity_date": {
                          "type": "string",
                          "description": "The date when the investment product matures",
                          "example": "2050-09-24"
                        },
                        "minimum_value": {
                          "type": "number",
                          "description": "The minimum investment amount required for the product",
                          "example": 100
                        },
                        "grace_period": {
                          "type": "number",
                          "description": "The grace period in days for the investment product",
                          "example": 1
                        },
                        "liquidity": {
                          "type": "string",
                          "description": "The liquidity frequency of the investment product",
                          "example": "Diaria"
                        },
                        "repurchase_grace_period": {
                          "type": "number",
                          "description": "The repurchase grace period in days for the investment product",
                          "example": 1
                        },
                        "calculation_criteria": {
                          "type": "string",
                          "description": "The criteria used for calculating the investment product",
                          "example": "PRE"
                        },
                        "criteria_type": {
                          "type": "string",
                          "description": "The type of criteria used",
                          "example": "CONTABIL"
                        },
                        "paper_type": {
                          "type": "string",
                          "description": "The type of financial instrument",
                          "example": "CDB"
                        },
                        "income_type": {
                          "type": "string",
                          "description": "The type of income generated by the investment product",
                          "example": "PRE"
                        },
                        "tax_rate_sequence_number": {
                          "type": "number",
                          "description": "The sequence number for the tax rate applied to the investment product",
                          "example": 4
                        },
                        "automatic_application_available": {
                          "type": "boolean",
                          "description": "Indicates whether automatic application is available for the investment product"
                        },
                        "escalated": {
                          "type": "boolean",
                          "description": "Indicates whether the investment product has escalated features"
                        },
                        "redemption_form_identifier": {
                          "type": "string",
                          "description": "The identifier for the redemption form associated with the investment product",
                          "example": "FIN"
                        },
                        "scheduling_available": {
                          "type": "boolean",
                          "description": "Indicates whether scheduling is available for the investment product"
                        },
                        "expiration_term": {
                          "type": "number",
                          "description": "Indicates the time of investment have to expire",
                          "example": 360
                        }
                      }
                    },
                    "cursor": {
                      "type": "object",
                      "description": "Describes properties of a cursor",
                      "properties": {
                        "after": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the last item of the list. If no more items exist, the property is removed from the response",
                          "example": "eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJ2YWx1ZSI6IjIwMjMtMTEtMDlUMTM6MDM6NDAuMDAwWiIsImxpbWl0IjoyfQ=="
                        },
                        "before": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the first item of the list. If its the first available item, the property is removed from the response",
                          "example": "eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJ2YWx1ZSI6IjIwMjMtMTEtMDlUMTM6MDM6NDAuMDAwWiIsImxpbWl0IjoyfQ=="
                        },
                        "limit": {
                          "type": "number",
                          "format": "base64",
                          "description": "number of items to return.",
                          "example": 10
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employees/{document_number}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get an employee by CPF",
        "operationId": "GetEmployeesDocumentNumber",
        "description": "Return an employee",
        "parameters": [
          {
            "in": "path",
            "name": "document_number",
            "schema": {
              "type": "string",
              "description": "A valid CPF from employee.",
              "minLength": 11,
              "example": 12345678911
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Employee returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "document_number": {
                      "type": "string",
                      "description": "Employee's document number",
                      "example": "01234567891"
                    },
                    "origin": {
                      "type": "string",
                      "enum": [
                        "SAP",
                        "PLURYA"
                      ],
                      "description": "Origin of the register"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Indicates if the employee is enabled"
                    },
                    "admissional_date": {
                      "type": "string",
                      "description": "The admissional date from employee",
                      "example": "2021-01-01"
                    },
                    "registration_code": {
                      "type": "string",
                      "description": "Employee's registration code",
                      "example": "12345"
                    },
                    "city": {
                      "type": "string",
                      "description": "Employee's city",
                      "example": "Caxias do Sul"
                    },
                    "company": {
                      "type": "string",
                      "description": "Employee's company",
                      "example": "DBSERVER ASSESSORIA EM SISTEMAS DE INFORMACAO LTDA"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error with types [EmployeeNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Employee Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "EMPLOYEE_NOT_FOUND",
                          "enum": [
                            "EMPLOYEE_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Employee not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "code": "EMPLOYEE_NOT_FOUND",
                  "message": "Employee not found."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "description": "Bearer auth (https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)."
      }
    },
    "schemas": {
      "payer": {
        "type": "object",
        "description": "Describes properties of payer",
        "required": [
          "ispb",
          "document_type",
          "document_number",
          "name",
          "account_type",
          "account_number",
          "account_digit"
        ],
        "properties": {
          "ispb": {
            "type": "number",
            "description": "ISPB number",
            "example": 11476673
          },
          "document_type": {
            "type": "string",
            "description": "Payer's document type",
            "enum": [
              "CPF",
              "CNPJ"
            ],
            "example": "CPF"
          },
          "document_number": {
            "type": "number",
            "description": "Payer's document number",
            "example": 18612366038
          },
          "name": {
            "type": "string",
            "description": "Payer's name",
            "example": "Payer name"
          },
          "agency_number": {
            "type": "number",
            "description": "Payer's agency number",
            "example": 1234
          },
          "account_type": {
            "type": "string",
            "description": "Payer's account type",
            "enum": [
              "CHECKING_ACCOUNT",
              "SAVINGS_ACCOUNT",
              "CONTROL_ACCOUNT",
              "GRAPHIC_ACCOUNT",
              "PAYMENT_ACCOUNT",
              "SALARY_ACCOUNT"
            ],
            "example": "CHECKING_ACCOUNT"
          },
          "account_number": {
            "type": "number",
            "description": "Payer's account number",
            "example": 12319
          },
          "account_digit": {
            "type": "number",
            "description": "Payer's account digit",
            "example": 1
          }
        }
      },
      "recipient": {
        "type": "object",
        "description": "Describes properties of recipient",
        "required": [
          "ispb",
          "document_type",
          "document_number",
          "account_type",
          "account_number",
          "account_digit"
        ],
        "properties": {
          "ispb": {
            "type": "number",
            "description": "ISPB number",
            "example": 11476673
          },
          "document_type": {
            "type": "string",
            "description": "Recipient's document type",
            "enum": [
              "CPF",
              "CNPJ"
            ]
          },
          "document_number": {
            "type": "number",
            "description": "Recipient's document number",
            "example": 18612366038
          },
          "name": {
            "type": "string",
            "description": "Recipient's name",
            "example": "Recipient name",
            "maxLength": 140
          },
          "agency_number": {
            "type": "number",
            "description": "Recipient's agency number",
            "example": 1234
          },
          "account_type": {
            "type": "string",
            "description": "Recipient's account type",
            "enum": [
              "CHECKING_ACCOUNT",
              "SAVINGS_ACCOUNT",
              "CONTROL_ACCOUNT",
              "GRAPHIC_ACCOUNT",
              "PAYMENT_ACCOUNT",
              "SALARY_ACCOUNT"
            ],
            "example": "CHECKING_ACCOUNT"
          },
          "account_number": {
            "type": "number",
            "description": "Recipient's account number",
            "example": 12319
          },
          "account_digit": {
            "type": "number",
            "description": "Recipient's account digit",
            "example": 1
          }
        }
      },
      "valueDetails": {
        "type": "array",
        "description": "The element group used to break down payment amounts\n\n* If the goal is equal to `BUY_OR_TRANSFER` do not inform this field.\n* If the goal is equal to `CHANGE` is mandatory to inform two different\ngroups, one with the kind equal to `PURCHASE_AMOUNT` and another with\nthe kind equal to `AVAILABLE_CASH`.\n* If the goal is equal to `WITHDRAW` is mandatory to inform one group with\nthe kind equal to `AVAILABLE_CASH`.\n",
        "items": {
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "PURCHASE_AMOUNT",
                "AVAILABLE_CASH"
              ],
              "description": "The value kind.\n\n* `PURCHASE_AMOUNT`: The purchase amount\n* `AVAILABLE_CASH`: Value of the resource in kind provided.\n",
              "example": "AVAILABLE_CASH"
            },
            "value": {
              "type": "number",
              "description": "The purchase value or the value of the resource in kind provided\n",
              "example": 10.99
            }
          }
        }
      },
      "payment": {
        "type": "object",
        "description": "Properties of payment.",
        "required": [
          "id",
          "account_id",
          "application_id",
          "operation",
          "kind",
          "payment_priority",
          "type_payment_priority",
          "goal",
          "payer",
          "recipient",
          "value",
          "description",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid-v4",
            "description": "Unique payment identifier",
            "example": "55c23fe3-d77e-484a-9b9e-f5642e459df8"
          },
          "application_id": {
            "type": "string",
            "format": "uuid-v4",
            "description": "Unique application identifier",
            "example": "55c23fe3-d77e-484a-9b9e-f5642e459df8"
          },
          "account_id": {
            "type": "string",
            "format": "uuid-v4",
            "description": "Unique account identifier",
            "example": "55c23fe3-d77e-484a-9b9e-f5642e459df8"
          },
          "end_to_end_id": {
            "type": "string",
            "description": "Payment's end to end id",
            "example": "E5c23fe3-d77e-484a-9b9e-f5642e459df8"
          },
          "operation": {
            "type": "string",
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "description": "Type of operation",
            "example": "CREDIT"
          },
          "kind": {
            "type": "string",
            "enum": [
              "MANUAL",
              "KEY",
              "STATIC_QRCODE",
              "DYNAMIC_QRCODE",
              "PAYMENT_TRANSACTION_SERVICE",
              "PAYER_QRCODE"
            ],
            "description": "Type of mechanism used to start the payment",
            "example": "KEY"
          },
          "payment_priority": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "IMMEDIATE"
            ],
            "description": "Indicates whether liquidation is priority or not",
            "example": "IMMEDIATE"
          },
          "type_payment_priority": {
            "type": "string",
            "enum": [
              "SCHEDULED_PAYMENT",
              "PRIORITY_PAYMENT",
              "FRAUD_ANALYSIS_PAYMENT"
            ],
            "description": "Indicate whether it is a priority transaction or not",
            "example": "PRIORITY_PAYMENT"
          },
          "goal": {
            "type": "string",
            "enum": [
              "CHANGE",
              "WITHDRAW",
              "BUY_OR_TRANSFER"
            ],
            "description": "Payment's goal",
            "example": "BUY_OR_TRANSFER"
          },
          "withdraw_ispb": {
            "type": "number",
            "description": "Withdraw service provider ISBP",
            "example": 11476673
          },
          "value": {
            "type": "number",
            "description": "Payment's value",
            "example": 10.99
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "CONFIRMING",
              "CONFIRMED",
              "NOT_CONFIRMED",
              "PROCESSING",
              "PROCESSED",
              "REJECTED",
              "ERROR",
              "DONE"
            ],
            "description": "Payment's status",
            "example": "CREATED"
          },
          "remaining_value": {
            "type": "number",
            "description": "Remaining value",
            "example": 500
          },
          "agent_modality": {
            "type": "string",
            "enum": [
              "WITHDRAW_SERVICE_AGENT",
              "COMMERCIAL_ESTABLISHMENT_AGENT",
              "AGENT_OR_OTHER_LEGAL_ENTITY"
            ],
            "description": "Agent modality of the withdraw",
            "example": "COMMERCIAL_ESTABLISHMENT_AGENT"
          },
          "document_payment_initiator": {
            "type": "number",
            "description": "CNPJ of the payment initiator institution",
            "example": 37650221000115
          },
          "key": {
            "type": "string",
            "description": "Recipient's key",
            "example": 85801560025
          },
          "description": {
            "type": "string",
            "description": "Payment's description",
            "example": "Payment description"
          },
          "conciliation_id": {
            "type": "string",
            "description": "Unique payment's conciliation identifier",
            "example": "PI2020010300000000000000000000001"
          },
          "created_at": {
            "type": "string",
            "description": "Payment's created at",
            "example": "2023-09-19T13:53:01.463Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The payment's updated at",
            "example": "2023-09-19T13:53:01.463Z"
          },
          "initiation_channel": {
            "type": "string",
            "enum": [
              "AGENCY",
              "APP",
              "ATM",
              "CALL_CENTER",
              "INTERNET_BANKING"
            ],
            "description": "Property indicates the payment initiation channel",
            "example": "INTERNET_BANKING"
          },
          "open_banking": {
            "type": "boolean",
            "description": "Indicates that the payment was initiated in the Open Banking",
            "example": true,
            "default": false
          },
          "initiator_name": {
            "type": "string",
            "description": "Name of the payment initiator institution",
            "example": "XPTO BANK",
            "maxLength": 80
          },
          "payer": {
            "type": "object",
            "description": "Describes properties of payer",
            "required": [
              "ispb",
              "document_type",
              "document_number",
              "name",
              "account_type",
              "account_number",
              "account_digit"
            ],
            "properties": {
              "ispb": {
                "type": "number",
                "description": "ISPB number",
                "example": 11476673
              },
              "document_type": {
                "type": "string",
                "description": "Payer's document type",
                "enum": [
                  "CPF",
                  "CNPJ"
                ],
                "example": "CPF"
              },
              "document_number": {
                "type": "number",
                "description": "Payer's document number",
                "example": 18612366038
              },
              "name": {
                "type": "string",
                "description": "Payer's name",
                "example": "Payer name"
              },
              "agency_number": {
                "type": "number",
                "description": "Payer's agency number",
                "example": 1234
              },
              "account_type": {
                "type": "string",
                "description": "Payer's account type",
                "enum": [
                  "CHECKING_ACCOUNT",
                  "SAVINGS_ACCOUNT",
                  "CONTROL_ACCOUNT",
                  "GRAPHIC_ACCOUNT",
                  "PAYMENT_ACCOUNT",
                  "SALARY_ACCOUNT"
                ],
                "example": "CHECKING_ACCOUNT"
              },
              "account_number": {
                "type": "number",
                "description": "Payer's account number",
                "example": 12319
              },
              "account_digit": {
                "type": "number",
                "description": "Payer's account digit",
                "example": 1
              }
            }
          },
          "recipient": {
            "type": "object",
            "description": "Describes properties of recipient",
            "required": [
              "ispb",
              "document_type",
              "document_number",
              "account_type",
              "account_number",
              "account_digit"
            ],
            "properties": {
              "ispb": {
                "type": "number",
                "description": "ISPB number",
                "example": 11476673
              },
              "document_type": {
                "type": "string",
                "description": "Recipient's document type",
                "enum": [
                  "CPF",
                  "CNPJ"
                ]
              },
              "document_number": {
                "type": "number",
                "description": "Recipient's document number",
                "example": 18612366038
              },
              "name": {
                "type": "string",
                "description": "Recipient's name",
                "example": "Recipient name",
                "maxLength": 140
              },
              "agency_number": {
                "type": "number",
                "description": "Recipient's agency number",
                "example": 1234
              },
              "account_type": {
                "type": "string",
                "description": "Recipient's account type",
                "enum": [
                  "CHECKING_ACCOUNT",
                  "SAVINGS_ACCOUNT",
                  "CONTROL_ACCOUNT",
                  "GRAPHIC_ACCOUNT",
                  "PAYMENT_ACCOUNT",
                  "SALARY_ACCOUNT"
                ],
                "example": "CHECKING_ACCOUNT"
              },
              "account_number": {
                "type": "number",
                "description": "Recipient's account number",
                "example": 12319
              },
              "account_digit": {
                "type": "number",
                "description": "Recipient's account digit",
                "example": 1
              }
            }
          },
          "value_details": {
            "type": "array",
            "description": "The element group used to break down payment amounts\n\n* If the goal is equal to `BUY_OR_TRANSFER` do not inform this field.\n* If the goal is equal to `CHANGE` is mandatory to inform two different\ngroups, one with the kind equal to `PURCHASE_AMOUNT` and another with\nthe kind equal to `AVAILABLE_CASH`.\n* If the goal is equal to `WITHDRAW` is mandatory to inform one group with\nthe kind equal to `AVAILABLE_CASH`.\n",
            "items": {
              "type": "object",
              "required": [
                "kind",
                "value"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "PURCHASE_AMOUNT",
                    "AVAILABLE_CASH"
                  ],
                  "description": "The value kind.\n\n* `PURCHASE_AMOUNT`: The purchase amount\n* `AVAILABLE_CASH`: Value of the resource in kind provided.\n",
                  "example": "AVAILABLE_CASH"
                },
                "value": {
                  "type": "number",
                  "description": "The purchase value or the value of the resource in kind provided\n",
                  "example": 10.99
                }
              }
            }
          }
        }
      },
      "AccountNotFound": {
        "title": "Account Not Found",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "ACCOUNT_NOT_FOUND",
            "enum": [
              "ACCOUNT_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "Account not found"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "404"
          }
        }
      },
      "InternalOperationExists": {
        "title": "Internal Operation already exists",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "Internal Operation already exists",
            "enum": [
              "INTERNAL_OPERATION_ALREADY_EXISTS"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "Internal Operation already exists"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "409"
          }
        }
      },
      "OperationNotFound": {
        "title": "Operation Not Found",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "OPERATION_NOT_FOUND",
            "enum": [
              "OPERATION_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "Operation not found"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "404"
          }
        }
      },
      "CursorDecoderError": {
        "title": "Cursor Decoder Error",
        "properties": {
          "code": {
            "description": "The type of error",
            "type": "string",
            "example": "CURSOR_DECODED"
          },
          "message": {
            "description": "Describes a message informing a reason for the error",
            "type": "string",
            "example": "Error to decode cursor"
          }
        }
      },
      "NotFound": {
        "title": "Not Found",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "NOT_FOUND",
                "enum": [
                  "NOT_FOUND"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "Unable to found the requested account"
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "404"
              }
            }
          }
        }
      },
      "InvalidDataError": {
        "title": "Invalid Data Error",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "INVALID_DATA",
                "enum": [
                  "INVALID_DATA"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "The data provided has an invalid format"
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "400"
              }
            }
          }
        }
      },
      "InvalidIdempotenceKeyError": {
        "title": "Invalid Idempotence Key Error",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "title": "Error code",
                "description": "The type of error",
                "example": "INVALID_IDEMPOTENCE_KEY",
                "enum": [
                  "INVALID_IDEMPOTENCE_KEY"
                ]
              },
              "message": {
                "type": "string",
                "title": "Error message",
                "description": "Describes a message informing a reason for the error",
                "example": "The data provided has an invalid format"
              },
              "status_code": {
                "type": "number",
                "description": "Error status code",
                "example": "400"
              }
            }
          }
        }
      },
      "IspbNotPermitedError": {
        "title": "The fraud mark can only be canceled by creator ispb or ispb who close the fraud mark",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "ISPB_NOT_PERMITED",
            "enum": [
              "ISPB_NOT_PERMITED"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "The fraud mark can only be canceled by creator ispb or ispb who close the fraud mark"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "403"
          }
        }
      },
      "FraudMarkingNotFound": {
        "title": "The provided fraud marking was not found or does not exist",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "FRAUD_MARKING_NOT_FOUND",
            "enum": [
              "FRAUD_MARKING_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "The provided fraud marking was not found or does not exist"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "404"
          }
        }
      },
      "FraudMarkingAlreadyCanceledError": {
        "title": "The fraud mark was already canceled.",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "FRAUD_MARKING_ALREADY_CANCELED",
            "enum": [
              "FRAUD_MARKING_ALREADY_CANCELED"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "The fraud mark was already canceled."
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "409"
          }
        }
      },
      "ExpirationTermInvalid": {
        "title": "Expiration Term Invalid",
        "type": "object",
        "description": "Representation of an bad request error",
        "properties": {
          "code": {
            "description": "The type of error",
            "type": "string",
            "example": "EXPIRATION_TERM_INVALID"
          },
          "message": {
            "description": "Describes a message informing a reason for the error",
            "type": "string",
            "example": "Expiration term invalid, is greater then term"
          }
        }
      },
      "ProductNotFound": {
        "title": "Product not found",
        "type": "object",
        "description": "Representation of an not found error",
        "properties": {
          "code": {
            "description": "The type of error",
            "type": "string",
            "example": "PRODUCT_NOT_FOUND"
          },
          "message": {
            "description": "Describes a message informing a reason for the error",
            "type": "string",
            "example": "Product was not found."
          }
        }
      },
      "EmployeeNotFound": {
        "title": "Employee Not Found",
        "properties": {
          "code": {
            "type": "string",
            "title": "Error code",
            "description": "The type of error",
            "example": "EMPLOYEE_NOT_FOUND",
            "enum": [
              "EMPLOYEE_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "title": "Error message",
            "description": "Describes a message informing a reason for the error",
            "example": "Employee not found"
          },
          "status_code": {
            "type": "number",
            "description": "Error status code",
            "example": "404"
          }
        }
      }
    }
  }
}